//----------------Sonic CD Spring Cage Script-----------------//
//--------Scripted by Christian Whitehead 'The Taxman'--------//
//-------Unpacked By Rubberduckycooly's Script Unpacker-------//

// Note - Object[+1} should be an R7Spring object

// Aliases
private alias object.value0 : Object.FullAngle
private alias object.value1 : Object.Angle
// Value2 is unused...
private alias object.value3 : Object.LaunchTimer

// R7 Spring Aliases
private alias object.value0 : Object.Timer

// States
private alias 0 : SPRINGCAGE_OPEN
private alias 1 : SPRINGCAGE_OCCUPIED

// Gravity
private alias 1 : GRAVITY_AIR

// Stage SFX
private alias 0 : SFX_S_LARGEBOOSTER // in origins, this SFX is Launcher
private alias 3 : SFX_S_LAUNCHER

// Property Values
private alias 0 : ROTATING_SPRING
// Could mention the rest, but they are all based on the normal springs so...

private alias object.value40 : player.hitboxLeft
private alias object.value38 : player.hitboxTop
private alias object.value41 : player.hitboxRight
private alias object.value39 : player.hitboxBottom

event ObjectUpdate
	foreach (GROUP_PLAYERS, currentPlayer, ACTIVE_ENTITIES)

	if object.state == SPRINGCAGE_OPEN
		if object.propertyValue == ROTATING_SPRING
			// Spin around
			Object.FullAngle++
			Object.FullAngle %= 48

			Object.Angle = Object.FullAngle
			Object.Angle /= 6
		end if

		// Update the content spring to show the correct sprite
		switch Object.Angle
		case 0
			// Right
			object[+1].propertyValue = 1
			break
		case 1
		case 7
			// Up right
			object[+1].propertyValue = 4
			break
		case 2
		case 6
			// Up
			object[+1].propertyValue = 0
			break
		case 3
		case 5
			// Up left
			object[+1].propertyValue = 5
			break
		case 4
			// Left
			object[+1].propertyValue = 2
			break
		end switch
	else
		if Object.LaunchTimer < 90
			if object[currentPlayer].state != Player_State_Death
				Object.LaunchTimer++

				if Object.LaunchTimer == 60

					// Origins fixed the SFX the Cage uses
					// This sound ID is only valid on Origins data files though, which is why we gotta separate it
#platform: USE_ORIGINS
					PlaySfx(SfxName[Shot], false)
					object[currentPlayer].state = Player_State_Air_NoDropDash
#endplatform

#platform: USE_STANDALONE
					PlaySfx(SfxName[LargeBooster], false)
					object[currentPlayer].state = Player_State_Air
#endplatform

					object[currentPlayer].gravity = GRAVITY_AIR
					object[currentPlayer].Timer = 0

					// Activate the spring
					Object.Timer[+1] = 1

					switch Object.Angle
					case 0
						object[currentPlayer].speed = 0x100000
						object[currentPlayer].xvel = 0x100000
						object[currentPlayer].yvel = 0x000000
						break

					case 1
					case 7
						object[currentPlayer].speed = 0x0C0000
						object[currentPlayer].xvel = 0x0C0000
						object[currentPlayer].yvel = -0x0B0000
						break

					case 2
					case 6
						object[currentPlayer].speed = 0x000000
						object[currentPlayer].xvel = 0x000000
						object[currentPlayer].yvel = -0x100000
						break

					case 3
					case 5
						object[currentPlayer].speed = -0x0C0000
						object[currentPlayer].xvel = -0x0C0000
						object[currentPlayer].yvel = -0x0B0000
						break

					case 4
						object[currentPlayer].speed = -0x100000
						object[currentPlayer].xvel = -0x100000
						object[currentPlayer].yvel = 0x000000
						break

					end switch
				end if
			else
				object.state = SPRINGCAGE_OPEN
				Object.LaunchTimer = 0
			end if
		else
			object.state = SPRINGCAGE_OPEN
			Object.LaunchTimer = 0
		end if
	end if

	if object.state == SPRINGCAGE_OPEN

		// See if the player's hopped in yet
		BoxCollisionTest(C_TOUCH, object.entityPos, -28, -32, 28, 24, currentPlayer, player[currentPlayer].hitboxLeft, player[currentPlayer].hitboxTop, player[currentPlayer].hitboxRight, player[currentPlayer].hitboxBottom)

		if checkResult == true
			object.state = SPRINGCAGE_OCCUPIED

			// Move the player into the cage and set them up to be launched
			object[currentPlayer].xpos = object.xpos
			object[currentPlayer].ypos = object.ypos
			object[currentPlayer].state = Player_State_Static
			object[currentPlayer].animation = ANI_JUMPING
			object[currentPlayer].speed = 0
			object[currentPlayer].xvel = 0
			object[currentPlayer].yvel = 0

			// Make minor positioning corrections based on the cage's current angle
			switch Object.Angle
			case 0
				object[currentPlayer].xpos += 0x200000 // 32 pixels right
				break
			case 1
			case 7
				object[currentPlayer].xpos += 0x180000 // 24 pixels right
				object[currentPlayer].ypos -= 0x180000 // 24 pixels up
				break
			case 2
			case 6
				object[currentPlayer].ypos -= 0x200000 // 32 pixels up
				break
			case 3
			case 5
				object[currentPlayer].xpos -= 0x180000 // 24 pixels left
				object[currentPlayer].ypos -= 0x180000 // 24 pixels up
				break
			case 4
				object[currentPlayer].xpos -= 0x200000 // 32 pixels up
				break
			end switch

		end if
	end if
	next
end event


event ObjectDraw
	// Jump based on what angle the cage is currently
	switch Object.Angle
	case 0
		// Facing right
		DrawSprite(1)
		object.direction = 2
		DrawSpriteFX(1, FX_FLIP, object.xpos, object.ypos)
		break

	case 1
	case 7
		// Facing up-right
		DrawSprite(2)
		object.direction = 3
		DrawSpriteFX(3, FX_FLIP, object.xpos, object.ypos)
		break

	case 2
	case 6
		// Facing up
		DrawSprite(4)
		object.direction = FACING_LEFT
		DrawSpriteFX(4, FX_FLIP, object.xpos, object.ypos)
		break

	case 3
	case 5
		// Facing up left
		object.direction = FACING_LEFT
		DrawSpriteFX(2, FX_FLIP, object.xpos, object.ypos)
		object.direction = 2
		DrawSpriteFX(3, FX_FLIP, object.xpos, object.ypos)
		break

	case 4
		// Facing left
		DrawSprite(5)
		object.direction = 2
		DrawSpriteFX(5, FX_FLIP, object.xpos, object.ypos)
		break

	end switch

	DrawSprite(0)

end event


event ObjectStartup

	LoadSpriteSheet("R7/Objects.gif")

	// Base Frame
	SpriteFrame(-8, -8, 16, 16, 90, 52)

	// Top Horizontal Half
	SpriteFrame(-8, -28, 64, 24, 34, 96)

	// Top Diagonal Half
	SpriteFrame(-24, -56, 56, 56, 59, 121)

	// Bottom Diagonal Half
	SpriteFrame(-56, -24, 56, 56, 59, 121)

	// Vertical Half
	SpriteFrame(-28, -56, 24, 64, 34, 121)

	// Buttom Horizontal Half
	SpriteFrame(-56, -28, 64, 24, 34, 96)

	foreach (TypeName[Spring Cage], arrayPos0, ALL_ENTITIES)

			arrayPos1 = arrayPos0
			arrayPos1++
			switch object[arrayPos0].propertyValue
			case 1
				Object.Angle[arrayPos0] = 4
				object[arrayPos1].propertyValue = 2
				break

			case 3
				Object.Angle[arrayPos0] = 1
				object[arrayPos1].propertyValue = 1
				break

			case 4
				Object.Angle[arrayPos0] = 2
				object[arrayPos1].propertyValue = 4
				break

			case 5
				Object.Angle[arrayPos0] = 3
				object[arrayPos1].propertyValue = 5
				break

			case 6
				Object.Angle[arrayPos0] = 0
				object[arrayPos1].propertyValue = 2
				break

			end switch

			object[arrayPos0].drawOrder = 4

			// Move the spring to the cage
			object[arrayPos1].xpos = object[arrayPos0].xpos
			object[arrayPos1].ypos = object[arrayPos0].ypos
	next

end event


// ========================
// Editor Subs
// ========================




// Property Value


// Direction





// Property Value


// Direction







event RSDKDraw
	switch object.propertyValue
	case 1
		DrawSprite(5)
		object.direction = 2
		DrawSpriteFX(5, FX_FLIP, object.xpos, object.ypos)
		break

	case 3
		DrawSprite(2)
		object.direction = 3
		DrawSpriteFX(3, FX_FLIP, object.xpos, object.ypos)
		break

	case 0
	case 4
		DrawSprite(4)
		object.direction = FACING_LEFT
		DrawSpriteFX(4, FX_FLIP, object.xpos, object.ypos)
		break

	case 5
		object.direction = FACING_LEFT
		DrawSpriteFX(2, FX_FLIP, object.xpos, object.ypos)
		object.direction = 2
		DrawSpriteFX(3, FX_FLIP, object.xpos, object.ypos)
		break

	case 6
		DrawSprite(1)
		object.direction = 2
		DrawSpriteFX(1, FX_FLIP, object.xpos, object.ypos)
		break

	end switch

	DrawSprite(0)

	if Editor.ShowGizmos == true
		// TODO: change this to "R7 Spring" once GetObjectType works with spaces


		arrayPos1 = object.entityPos
		arrayPos1++
		if object[arrayPos1].type != temp0
			// Uh oh! The next object should be an R7 Spring object, but it isn't...
			// Draw a bunch of red to let the user know

			Editor.DrawingOverlay = true



			temp0 = object[arrayPos1].xpos
			temp0 -= 0x100000

			temp1 = object[arrayPos1].ypos
			temp1 -= 0x100000

			temp2 = object[arrayPos1].xpos
			temp2 += 0x100000

			temp3 = object[arrayPos1].ypos
			temp3 += 0x100000




			Editor.DrawingOverlay = false
		end if
	end if
end event


event RSDKLoad
	LoadSpriteSheet("R7/Objects.gif")
	SpriteFrame(-8, -8, 16, 16, 90, 52) // Base Frame
	SpriteFrame(-8, -28, 64, 24, 34, 96) // Top Horizontal Half
	SpriteFrame(-24, -56, 56, 56, 59, 121) // Top Diagonal Half
	SpriteFrame(-56, -24, 56, 56, 59, 121) // Bottom Diagonal Half
	SpriteFrame(-28, -56, 24, 64, 34, 121) // Vertical Half
	SpriteFrame(-56, -28, 64, 24, 34, 96) // Buttom Horizontal Half





	// 2 is pointing up dupe




end event
