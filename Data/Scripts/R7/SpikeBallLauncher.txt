//---------------Sonic CD Spike Launcher Script---------------//
//--------Scripted by Christian Whitehead 'The Taxman'--------//
//-------Unpacked By Rubberduckycooly's Script Unpacker-------//

// Aliases
private alias object.value0 : Object.Timer

// Position is an offset relative to the base Spike Launcher Object, in world-space
private alias object.value1 : Object.SpikeBallPosition
private alias object.value2 : Object.SpikeBallVelocity

private alias 0 : SPIKELAUNCHER_INIT
private alias 1 : SPIKELAUNCHER_RAISING
private alias 2 : SPIKELAUNCHER_PAUSE
private alias 3 : SPIKELAUNCHER_THROWN
private alias 4 : SPIKELAUNCHER_CATCHING

// Priority
private alias 0 : PRIORITY_BOUNDS
private alias 1 : PRIORITY_ACTIVE

// Property Values
private alias 0 : LAUNCH_DIR_UP
private alias 1 : LAUNCH_DIR_DOWN
private alias 2 : LAUNCH_DIR_LEFT
private alias 3 : LAUNCH_DIR_RIGHT

private alias object.value40 : player.hitboxLeft
private alias object.value38 : player.hitboxTop
private alias object.value41 : player.hitboxRight
private alias object.value39 : player.hitboxBottom

event ObjectUpdate

	switch object.state
	case SPIKELAUNCHER_INIT
		// Set the object to always be active
		object.priority = PRIORITY_ACTIVE

		// Give it a bit of time before starting the object's main routine proper
		if Object.Timer < 150
			Object.Timer++
		else
			Object.Timer = 0
			Object.SpikeBallPosition = 0
			object.state++
		end if
		break

	case SPIKELAUNCHER_RAISING
		// Start by poking the Spike Ball out of the Launcher's face, half a pixel per frame at a time
		if Object.Timer < 32
			Object.Timer++
			Object.SpikeBallPosition -= 0x8000
		else
			Object.Timer = 0
			object.state++
		end if
		break

	case SPIKELAUNCHER_PAUSE
		// Now, pause for a moment before shooting the Spike Ball away
		if Object.Timer < 30
			Object.Timer++
		else
			Object.Timer = 0

			// Initial velocity of 6 pixels per frame
			Object.SpikeBallVelocity = -0x60000
			object.state++
		end if
		break

	case SPIKELAUNCHER_THROWN
		if Object.SpikeBallPosition < 0
			// Apply a gravity of 0.25 pixels to the Spike Ball every frame
			Object.SpikeBallVelocity += 0x4000

			// And then actually add the Velocity to the Spike Ball's position
			Object.SpikeBallPosition += Object.SpikeBallVelocity
		else
			object.state++
		end if
		break

	case SPIKELAUNCHER_CATCHING
		if Object.Timer < 40
			Object.Timer++
		else
			Object.Timer = 0
			Object.SpikeBallPosition = 0
			object.state = SPIKELAUNCHER_RAISING
		end if
		break

	end switch

	if object.outOfBounds == true

		// Reset the object and give it normal priority

		object.state = SPIKELAUNCHER_INIT
		Object.Timer = 0
		object.priority = PRIORITY_BOUNDS

	end if

	foreach (GROUP_PLAYERS, currentPlayer, ACTIVE_ENTITIES)
	
		// Only check for Spike Ball collisions if it's a state where the Spike ball is actually visible
		switch object.state
		case SPIKELAUNCHER_RAISING
		case SPIKELAUNCHER_PAUSE
		case SPIKELAUNCHER_THROWN
	
			// First, backup the base object's position
			temp0 = object.xpos
			temp1 = object.ypos
	
			// Then, add the corresponding offset based on the Spike Ball's position
			switch object.propertyValue
			case LAUNCH_DIR_UP
				// Upwards
				object.ypos += Object.SpikeBallPosition
				break
	
			case LAUNCH_DIR_DOWN
				// Downwards
				object.ypos -= Object.SpikeBallPosition
				break
	
			case LAUNCH_DIR_LEFT
				// Left
				object.xpos += Object.SpikeBallPosition
				break
	
			case LAUNCH_DIR_RIGHT
				// Right
				object.xpos -= Object.SpikeBallPosition
				break
	
			end switch
	
			// Check collision with the player & hurt them if needed
			BoxCollisionTest(C_TOUCH, object.entityPos, -12, -12, 12, 12, currentPlayer, player[currentPlayer].hitboxLeft, player[currentPlayer].hitboxTop, player[currentPlayer].hitboxRight, player[currentPlayer].hitboxBottom)
	
			if checkResult == true
				CallFunction(Player_Hit)
			end if
	
			// Restore the object's base position
			object.xpos = temp0
			object.ypos = temp1
	
			// No break is used here, although it doesn't matter too much anyways since there's nothing afterwards

		end switch
	next
end event



event ObjectDraw

	if object.drawOrder == 3
		// Drawing the Spike Ball...

		switch object.state
		case SPIKELAUNCHER_RAISING
		case SPIKELAUNCHER_PAUSE
		case SPIKELAUNCHER_THROWN
			switch object.propertyValue
			case LAUNCH_DIR_UP
				// Upwards
				temp0 = object.ypos
				temp0 += Object.SpikeBallPosition
				DrawSpriteXY(4, object.xpos, temp0)
				break

			case LAUNCH_DIR_DOWN
				// Downwards
				temp0 = object.ypos
				temp0 -= Object.SpikeBallPosition
				DrawSpriteXY(4, object.xpos, temp0)
				break

			case LAUNCH_DIR_LEFT
				// Facing left
				temp0 = object.xpos
				temp0 += Object.SpikeBallPosition
				DrawSpriteXY(4, temp0, object.ypos)
				break

			case LAUNCH_DIR_RIGHT
				// Facing right
				temp0 = object.xpos
				temp0 -= Object.SpikeBallPosition
				DrawSpriteXY(4, temp0, object.ypos)
				break

			end switch // Object.PropertyValue

			// No break is used here, as it's not needed

		end switch // Object.State

		// Add the Object to Draw List 4 so that its other half can draw above the Spike Ball
		SetDrawListEntityRef(object.entityPos, 4, screen.drawListSize[4])
		screen.drawListSize[4]++
		object.drawOrder = 4

	else
		// Drawing the Spike Ball Launcher itself...

		// The object's direction is stored in its Property Value, which also happens to align with the correct Sprite Frames
		DrawSprite(object.propertyValue)

		// Reset the object's Draw Order back to 3 so that this whole process can be done again next frame
		object.drawOrder = 3
	end if

end event



event ObjectStartup

	LoadSpriteSheet("R7/Objects.gif")

	// Upwards Launcher Frame
	SpriteFrame(-16, -16, 32, 16, 133, 1)

	// Downwards Launcher Frame
	SpriteFrame(-16, 0, 32, 16, 166, 1)

	// Left-facing Launcher Frame
	SpriteFrame(-16, -16, 16, 32, 1, 166)

	// Right-facing Launcher Frame
	SpriteFrame(0, -16, 16, 32, 17, 166)

	// Spike Ball Frame
	SpriteFrame(-16, -16, 32, 32, 1, 199)

end event


// ========================
// Editor Subs
// ========================




// Property Value


// Direction





// Property Value


// Direction







event RSDKDraw
	DrawSprite(4)
	DrawSprite(object.propertyValue)

	if Editor.ShowGizmos == true
		Editor.DrawingOverlay = true

		temp0 = object.xpos
		temp1 = object.ypos

		switch object.propertyValue
		case 0
		default
			temp1 -= 0x300000
			break

		case 1
			temp1 += 0x300000
			break

		case 2
			temp0 -= 0x300000
			break

		case 3
			temp0 += 0x300000
			break

		end switch



		Editor.DrawingOverlay = false
	end if
end event


event RSDKLoad
	LoadSpriteSheet("R7/Objects.gif")
	SpriteFrame(-16, -16, 32, 16, 133, 1)
	SpriteFrame(-16, 0, 32, 16, 166, 1)
	SpriteFrame(-16, -16, 16, 32, 1, 166)
	SpriteFrame(0, -16, 16, 32, 17, 166)
	SpriteFrame(-16, -16, 32, 32, 1, 199)







end event
