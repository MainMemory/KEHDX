//----------------Sonic CD Tunnel Path Script-----------------//
//--------Scripted by Christian Whitehead 'The Taxman'--------//
//-------Unpacked By Rubberduckycooly's Script Unpacker-------//

//Karl's Note (Before rework): Reworking this into a table sucks, I can't wait to do Stardust Speedway
//Karl's Note (After rework): worth it

// Aliases

// A bitfield, for all the active players
private alias object.state : object.activePlayers

// The object's per-player "timer" value is value[currentPlayer], ie value0 for P1, value1 for P2, onwards and so forth


// Player Aliases
private alias object.value7 : player.invincibleTimer
private alias object.value8 : player.blinkTimer
private alias object.value40 : player.hitboxLeft
private alias object.value38 : player.hitboxTop
private alias object.value41 : player.hitboxRight
private alias object.value39 : player.hitboxBottom

// Property Values
private alias 0 : TUNNEL_ENTRY
private alias 1 : TUNNEL_HOLE

private alias saveRAM[202] : saved.character


// ========================
// Tables
// ========================

private table TunnelPath_XPos
	0x13F0B100, 0x1400B100, 0x1410B100, 0x1420B100, 0x1430B100, 0x1440B100, 0x1450B100, 0x1460B100, 0x1470B100, 0x1478B100, 0x147F8C00, 0x14866700, 0x148D4200, 0x14904200, 0x14904200 
	0x14904200, 0x14904200, 0x14904200, 0x14904200, 0x14904200, 0x14904200, 0x14904200, 0x14904200, 0x14904200, 0x14804200, 0x14704200, 0x14604200, 0x14504200, 0x14404200, 0x14304200
	0x14204200, 0x14104200, 0x14004200, 0x13F84200, 0x13F04200, 0x13F04200, 0x13F04200, 0x13F04200, 0x13F04200, 0x14004200, 0x14104200, 0x14204200, 0x14304200, 0x14404200, 0x144BAF00
	0x14571C00, 0x14628900, 0x14688900, 0x14788900, 0x14888900, 0x14988900, 0x14A88900, 0x14B88900, 0x14C88900, 0x14D88900, 0x14F88900, 0x15088900, 0x15188900, 0x15288900, 0x15388900
	0x15488900, 0x15588900, 0x15688900, 0x15788900, 0x15888900, 0x15988900, 0x15A88900, 0x15B88900, 0x15C88900, 0x15D88900, 0x15F88900, 0x16088900, 0x16188900, 0x16288900, 0x16388900
	0x16488900, 0x16588900, 0x16608900, 0x16708900, 0x16808900, 0x16908900, 0x16A08900, 0x16B08900, 0x16C08900, 0x16C5DE00, 0x16CB3300, 0x16D08800, 0x16C88800, 0x16C08800, 0x16B08800
	0x16A08800, 0x16908800, 0x16808800, 0x16708800, 0x16608800, 0x16588800, 0x164EEF00, 0x16455600, 0x16405600, 0x1646BC00, 0x164D2200, 0x16502200, 0x16602200, 0x16702200, 0x16802200
	0x16902200, 0x16A02200, 0x16B02200, 0x16C02200, 0x16D02200, 0x16D02200, 0x16D02200, 0x16D02200, 0x16D02200, 0x16D02200, 0x16D02200, 0x16D02200, 0x16D02200, 0x16CB9000, 0x16C6FE00
	0x16C26C00, 0x16C06C00, 0x16B06C00, 0x16A06C00, 0x16906C00, 0x16806C00, 0x16706C00, 0x16606C00, 0x16506C00, 0x16506C00, 0x16506C00, 0x16606C00, 0x16706C00, 0x16806C00, 0x16906C00
	0x16A06C00, 0x16B06C00, 0x16C06C00, 0x16D06C00, 0x16E06C00, 0x16F06C00, 0x17006C00, 0x17106C00, 0x17206C00, 0x17286C00, 0x17286C00, 0x17286C00, 0x17286C00, 0x17286C00, 0x17186C00
	0x17086C00, 0x17006C00, 0x16F06C00, 0x16E09A00, 0x16E09A00
end table

private table TunnelPath_YPos 
	0xF06500, 0xF06500, 0xF06500, 0xF06500, 0xF06500, 0xF06500, 0xF74000, 0xFE1B00, 0x104F600, 0x108F600, 0x118F600, 0x128F600, 0x138F600, 0x140F600, 0x150F600, 0x160F600, 0x170F600
	0x180F600, 0x190F600, 0x1A0F600, 0x1B0F600, 0x1C0F600, 0x1D0F600, 0x1E0F600, 0x1E5C200, 0x1EA8E00, 0x1EF5A00, 0x1F42600, 0x1F8F200, 0x1F2F200, 0x1ECF200, 0x1E6F200, 0x1E0F200
	0x1D0F200, 0x1C0F200, 0x1B0F200, 0x1A0F200, 0x190F200, 0x180F200, 0x170F200, 0x16CF200, 0x168F200, 0x16CF200, 0x170F200, 0x180F200, 0x190F200, 0x1A0F200, 0x1A8F200, 0x1AC8000
	0x1B00E00, 0x1B39C00, 0x1B72A00, 0x1BAB800, 0x1BE4600, 0x1C1D400, 0x1C56200, 0x1C8F000, 0x1CC7E00, 0x1D00C00, 0x1D39A00, 0x1D72800, 0x1DAB600, 0x1DE4400, 0x1E1D200, 0x1E56000
	0x1E8EE00, 0x1EC7C00, 0x1F00A00, 0x1F39800, 0x1F72600, 0x1FAB400, 0x201D000, 0x2055E00, 0x208EC00, 0x20C7A00, 0x20C7A00, 0x2100800, 0x2139600, 0x2172400, 0x2182400, 0x2162400
	0x2142400, 0x2122400, 0x2102400, 0x2042400, 0x1F82400, 0x1E82400, 0x1D82400, 0x1C82400, 0x1B82400, 0x1A82400, 0x1A42400, 0x1A02400, 0x19C2400, 0x1982400, 0x19B5700, 0x19E8A00
	0x1A08A00, 0x1B08A00, 0x1C08A00, 0x1C88A00, 0x1D88A00, 0x1E88A00, 0x1F08A00, 0x1F5DF00, 0x1FB3400, 0x2008900, 0x2008900, 0x2008900, 0x2008900, 0x2008900, 0x2108900, 0x2208900
	0x2308900, 0x2408900, 0x2408900, 0x2508900, 0x2608900, 0x2708900, 0x2808900, 0x2888900, 0x2988900, 0x2A88900, 0x2B88900, 0x2C08900, 0x2C68900, 0x2CC8900, 0x2D28900, 0x2D88900
	0x2D08900, 0x2C88900, 0x2C08900, 0x2B08900, 0x2A08900, 0x29B3400, 0x295DF00, 0x2908A00, 0x2908A00, 0x2908A00, 0x2908A00, 0x2908A00, 0x2908A00, 0x2908A00, 0x2908A00, 0x2908A00
	0x296F000, 0x29D5600, 0x2A05600, 0x2B05600, 0x2C05600, 0x2D05600, 0x2E05600, 0x2E6BC00, 0x2ED2200, 0x2F02200, 0x2E68800, 0x2E4F900, 0x2E4F900
end table


// ========================
// Events
// ========================

event ObjectUpdate
	currentPlayer = 0
	while currentPlayer < playerCount
		if object[currentPlayer].state == Player_State_Static
			GetBit(temp1, object.activePlayers, currentPlayer)
			GetObjectValue(temp0, currentPlayer, object.entityPos) // object.playerX.timer
		
			if temp1 == true
				if object[currentPlayer].state == Player_State_Death
					SetBit(object.activePlayers, currentPlayer, false)
					temp1 = false
				end if
				
				temp0++ // object.playerX.timer
				
				object[currentPlayer].speed = object[currentPlayer].xpos
				object[currentPlayer].visible = false
				object[currentPlayer].Interaction = false

				GetTableValue(object[currentPlayer].xpos, temp0, TunnelPath_XPos)
				GetTableValue(object[currentPlayer].ypos, temp0, TunnelPath_YPos)
		
				// activate shit
				switch temp0
				case 57
				case 60
				case 63
				case 66
					// Splash
					CreateTempObject(TypeName[WaterfallSplash], 0, object[currentPlayer].xpos, object[currentPlayer].ypos)
					break
					
				case 155
					// Exit
					object[currentPlayer].visible = true
					object[currentPlayer].tileCollisions = true
					
					SetBit(object.activePlayers, currentPlayer, false)
					temp1 = false
					
					if object.activePlayers == 0 // All bits empty, no players in the tube
						object.priority = PRIORITY_BOUNDS
					end if
		
					object[currentPlayer].xvel = -0xC0000
					object[currentPlayer].speed = -0xC0000
					object[currentPlayer].state = Player_State_Ground
					object[currentPlayer].Interaction = true
		
					if object[+1].type == TypeName[Blank Object]
						object[+1].type = TypeName[Tunnel Path]
						PlaySfx(SfxName[Crumble], false)
					end if
					break
					
				end switch
		
				if temp0 > 155
					temp0 = 155
				end if
				SetObjectValue(temp0, currentPlayer, object.entityPos) // object.playerX.timer
				
				if temp1 == true
					object[currentPlayer].speed -= object[currentPlayer].xpos
					FlipSign(object[currentPlayer].speed)
				end if
			end if
		end if
		
		currentPlayer++
	loop
	
	foreach (GROUP_PLAYERS, currentPlayer, ACTIVE_ENTITIES)
		if object.propertyValue == TUNNEL_ENTRY
			if object[currentPlayer].state != Player_State_Static
				BoxCollisionTest(C_TOUCH, object.entityPos, -16, -16, 16, 16, currentPlayer, player[currentPlayer].hitboxLeft, player[currentPlayer].hitboxTop, player[currentPlayer].hitboxRight, player[currentPlayer].hitboxBottom)
				
				if checkResult == true
					object[currentPlayer].state = Player_State_Static
					if player[currentPlayer].blinkTimer > 0
						player[currentPlayer].invincibleTimer = 0
						player[currentPlayer].blinkTimer = 0
					end if
					object[currentPlayer].tileCollisions = false
					object[currentPlayer].visible = false
					
					SetBit(object.activePlayers, currentPlayer, true)
					SetObjectValue(0, currentPlayer, object.entityPos) // object.playerX.timer
					
					object.priority = PRIORITY_ACTIVE
	
					PlaySfx(SfxName[Release], false)
				end if
			end if
		end if
	next
end event


event ObjectDraw
	if object.propertyValue > 0
		DrawSprite(0)
	end if
end event


event ObjectStartup
	LoadSpriteSheet("R1/Objects3.gif")
	
	// #0 - Wall Hole
	switch saved.character
	case 0
	default
		// Knuckles
		SpriteFrame(-17, -20, 34, 40, 145, 167) 
		break
	case 1
		// Tikal
		SpriteFrame(-15, -19, 30, 38, 147, 208) 
		break
	end switch
end event


// ========================
// Editor Subs
// ========================

event RSDKDraw
	DrawSprite(0)
end event


event RSDKLoad
	LoadSpriteSheet("R1/Objects.gif")
	SpriteFrame(-16, -16, 32, 32, 34, 175) // #0 - Wall Hole
	
	SetVariableAlias(ALIAS_VAR_PROPVAL, "unused")
end event
