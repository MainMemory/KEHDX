// ----------------------------------
// RSDK Project: Sonic 2
// Script Description: HUD Object
// Script Author: Christian Whitehead/Simon Thomley
// Unpacked by Rubberduckycooly's script unpacker
// ----------------------------------

// ========================
// Aliases
// ========================

private alias object.value0 : object.flashingTimer

// Player Aliases
private alias object.state : player.state
private alias object.animation : player.animation
private alias object.controlMode : player.controlMode
private alias object.xpos : player.xpos
private alias object.ypos : player.ypos
private alias object.xvel : player.xvel
private alias object.yvel : player.yvel
private alias object.speed : player.speed
private alias object.visible : player.visible
private alias object.direction : player.direction
private alias object.jumpPress : player.jumpPress
private alias object.jumpHold : player.jumpHold
private alias object.up : player.up
private alias object.down : player.down
private alias object.left : player.left
private alias object.right : player.right

private alias object.value0 : player.rings
private alias object.value1 : player.timer
private alias object.value3 : player.drownTimer
private alias object.value4 : player.drownLevel
private alias object.value7 : player.invincibleTimer
private alias object.value8 : player.blinkTimer
private alias object.value37 : player.shield

private alias 39 : ANI_VICTORY

// Game Mode Aliases
private alias 2 : MODE_TIMEATTACK

// Reserved object slot Aliases
private alias 9 : SLOT_HUD

// KEHDX Aliases, for a variety of things
// Since this object is the master Emerald tracker, we've got a whole lot more to do here than just draw HUD

// First, are the states
private alias 0 : EMERALDMANAGER_INIT
private alias 1 : EMERALDMANAGER_MAIN
private alias 2 : EMERALDMANAGER_FADEOUT
private alias 3 : EMERALDMANAGER_FADEIN
private alias 4 : EMERALDMANAGER_RESULTS

private alias object.value1 : EmeraldManager.pingTimer
private alias object.value2 : EmeraldManager.fade

// Used for shifting the HUD off of the screen
private alias object.value3 : object.xoffset

private alias object.value4 : object.milliseconds
private alias object.value5 : object.seconds
private alias object.value6 : object.minutes

// A constant value, for the minimum allowed distance between Emerald placements, don't want all the Emeralds right next to each other!
private alias 0x19000 : EMERALDMANAGER_MINDIST

// KEHDX TODO: implement this as a proper option
private alias 0 : EMERALDMANAGER_USEARROWS

// Track Aliases
private alias 1 : TRACK_ACTFINISH

// SaveRAM Aliases
private alias saveRAM[200] : saved.radar // 0 = radar, 1 = no radar, 2 = arrows
private alias saveRAM[201] : saved.radarstyle // 0 = New, KEHDX sprites, 1 = Old, Genesis Sprites
private alias saveRAM[202] : saved.character // 0 =  Knuckles, 1 = Tikal (We'll add more)

// Now, a mess
// So, in order to get an array of a series of values, we just stuff player-dependant values in some reserved object slots in the transition object bank
// The original solution was to use `local[]`, but there's no dependant way to get a static var ID and it wouldn't be terribly safe to use a hardcoded ID
// In place of that, now we got an array of sorts in the form of random blank objects, starting at [0x500] (normal obj slots end at [0x4A0], just a bit of leeway)

private alias object.value0 : object.collectedEmeralds


// ========================
// Function Declarations
// ========================

reserve function EmeraldManager_AddEntity
reserve function EmeraldManager_AwardEmerald
reserve function EmeraldManager_AwardBonus
reserve function EmeraldManager_DrawHUD
reserve function sqrt

reserve function HUD_Draw_Standard


// ========================
// Static Values
// ========================

private value EmeraldManager_EntityCount = 0;
public value EmeraldManager_EmeraldCount = 0;
private value EmeraldManager_EmeraldTimer = 0;
private value EmeraldManager_BonusTimer = 0;
private value EmeraldManager_BonusFrame = -1;
private value EmeraldManager_GotEmeralds = 0;
public value EmeraldManager_EndX = 0;
public value EmeraldManager_EndY = 0;

// Which "mode" the Emeralds & such should be in, defs are right down below
public value EmeraldManager_Mode = 0; // Default of EMERALD_MODE_S2, aliases aren't supported in static declarations

private alias 0 : EMERALD_MODE_S2
private alias 1 : EMERALD_MODE_HPZ
private alias 2 : EMERALD_MODE_S1
private alias 3 : EMERALD_MODE_CD


// ========================
// Tables
// ========================

// Used on scene startup, to add all objects needed into the selection pool
private table EmeraldManager_ObjectPool[255]

// Used in-game, to store the entityPos of the objects holding emeralds
public table EmeraldManager_EmeraldObjects[5]

// Used to hold which frame the Emerald icon should use, in the HUD
private table EmeraldManager_RadarFrames[5]

// Similar to above, this one is just for the Emerald icons' scale
private table EmeraldManager_RadarScale[5]

// Score bonuses, based on how fast the player gets an Emerald
private table EmeraldManager_ScoreBonuses
	20000, 15000, 10000, 8000, 6000, 5000, 4000, 3000, 2000, 1000
end table

// The distance thresholds, between Emerald icon changes
private table EmeraldManager_DistanceLimits
	0x190000 // Blue
	0xE1000  // Green
	0x19000  // Yellow
	0x6400   // Orange (not really orange, but i have no idea what this colour's name is tbh)
	0x2400   // Red
	-1       // Fallback to grey
end table

// The colours each Emerald icon frame should be, in RGB as normal
private table EmeraldManager_RadarColours
	0xA0A0A0 // Grey
	0x2040C0 // Blue
	0x008000 // Green
	0xE0A000 // Yellow
	0xE05060 // Orange (?)
	0xE00000 // Red
end table


// ========================
// Function Definitions
// ========================

public function EmeraldManager_AddEntity
	// This function is called to add an entity to the emerald start pool
	
	// Preconditions:
	// - arrayPos0 is the entity pos of the target object
	
	SetTableValue(arrayPos0, EmeraldManager_EntityCount, EmeraldManager_ObjectPool)
	EmeraldManager_EntityCount++
end function


private function EmeraldManager_AwardBonus
	GetTableValue(temp0, EmeraldManager_BonusFrame, EmeraldManager_ScoreBonuses)
	player.score += temp0
	EmeraldManager_BonusFrame = -1
end function


public function EmeraldManager_AwardEmerald
	arrayPos3 = 0x500 // this function may be called inside a foreach where ar0 may already be in use, don't want any conflicts...
	temp0 = 0
	while arrayPos3 < 0x504
		CheckEqual(object[arrayPos3].collectedEmeralds, EmeraldManager_EmeraldCount)
		temp0 |= checkResult
		
		arrayPos3++
	loop
	
	temp0 *= 255
	temp1 = temp0
	while temp1 < EmeraldManager_EmeraldCount
		GetTableValue(arrayPos0, temp1, EmeraldManager_EmeraldObjects)
		if arrayPos0 == object.entityPos
			CreateTempObject(TypeName[Chaos Emerald], currentPlayer, player[currentPlayer].xpos, player[currentPlayer].ypos)
			object[tempObjectPos].ypos -= 0x200000
			object[tempObjectPos].state = 2
			object[tempObjectPos].drawOrder = 5
			object[tempObjectPos].propertyValue = currentPlayer
			object[tempObjectPos].inkEffect = INK_ALPHA
			object[tempObjectPos].priority = PRIORITY_ACTIVE
			
			arrayPos3 = 0x500
			arrayPos3 += currentPlayer
			object[arrayPos3].collectedEmeralds++ // can be changed to `+= 3` when testing, if you really wanna
			
			// Just to be kind, let's refresh the player's air too
			player[currentPlayer].drownTimer = 0
			player[currentPlayer].drownLevel = 0
			
			if object[arrayPos3].collectedEmeralds >= EmeraldManager_EmeraldCount
				stage.timeEnabled = false
			end if
			
			if options.vsMode == false
				if EmeraldManager_BonusFrame != -1
					CallFunction(EmeraldManager_AwardBonus)
				end if
				EmeraldManager_BonusFrame = EmeraldManager_EmeraldTimer
				EmeraldManager_BonusFrame /= 1800
				if EmeraldManager_BonusFrame > 9
					EmeraldManager_BonusFrame = -1
				end if
				EmeraldManager_BonusTimer = 120
				EmeraldManager_EmeraldTimer = 0
			end if
			
			PlaySfx(SfxName[Star Post], false)
			SetTableValue(-1, temp1, EmeraldManager_EmeraldObjects)
			SetTableValue(-1, temp1, EmeraldManager_RadarFrames)
			EmeraldManager_GotEmeralds++
		end if
		
		temp1++
	loop
end function


public function EmeraldManager_DeleteEmerald
	EmeraldManager_GotEmeralds--
end function


private function EmeraldManager_DrawHUD
	// duh emealds
	temp1 = EmeraldManager_EmeraldCount
	temp1 *= 20
	temp1 -= 4
	temp1 >>= 1
	
	temp0 = screen.xcenter
	temp0 -= temp1
	temp1 = screen.ysize
	temp1 -= 16
	temp1 -= object.xoffset
	
	temp2 = 0
	while temp2 < EmeraldManager_EmeraldCount
		GetTableValue(temp3, temp2, EmeraldManager_RadarFrames)
		temp4 = temp3
		temp4 >>= 8
		temp4 &= 255
		temp3 &= 255
		switch temp3
		case 255
			// The Emerald's been grabbed, we don't need to display it anymore
			break
			
		case 38
			// Draw the faint, alpha Emerald sprite, as it's nowhere near range yet
			temp3 += temp4
			DrawSpriteScreenFX(temp3, FX_INK, temp0, temp1)
			break
			
		default
			// Draw the throbbing Emerald frame
			
			temp7 = 38
			temp7 += temp4
			
			// First, fetch its scale
			GetTableValue(object.scale, temp2, EmeraldManager_RadarScale)
			object.scale *= 5
			object.scale += 512
			
			// Then, back up the used colour slot
			GetPaletteEntry(0, 7, temp4)
			GetPaletteEntry(1, 7, temp5)
			
			// With that, now we can turn the ID into a colour and set it
			temp3 -= 38
			GetTableValue(temp6, temp3, EmeraldManager_RadarColours)
			
			SetPaletteEntry(0, 7, temp6)
			SetPaletteEntry(1, 7, temp6)
			
			// From there, draw the sprite with that chosen colour
			DrawSpriteScreenFX(temp7, FX_SCALE, temp0, temp1)
			
			// And after all that, we can restore the old colour now
			SetPaletteEntry(0, 7, temp4)
			SetPaletteEntry(1, 7, temp5)
			break
			
		end switch
		
		temp0 += 20
		temp2++
	loop
end function


private function HUD_Draw_Standard
	temp0 = 17
	temp0 -= object.xoffset
	DrawSpriteScreenXY(10, temp0, 13)

	if player[currentPlayer].rings == 0
		if object.flashingTimer > 7
			DrawSpriteScreenXY(12, temp0, 45)
		end if
	end if

	temp1 = 104
	temp1 -= object.xoffset
	DrawNumbers(0, temp1, 13, player.score, 6, 8, false)

	temp0 = 67
	temp0 -= object.xoffset
	DrawSpriteScreenXY(13, temp0, 29)

	DrawNumbers(0, temp1, 29, stage.milliSeconds, 2, 8, true)
	temp0 = 80
	temp0 -= object.xoffset
	DrawNumbers(0, temp0, 29, stage.seconds, 2, 8, true)
	temp0 -= 24
	DrawNumbers(0, temp0, 29, stage.minutes, 1, 8, true)

	DrawNumbers(0, temp1, 45, player[currentPlayer].rings, 3, 8, false)

	arrayPos0 = 0x500
	arrayPos0 += currentPlayer
	
	if stage.debugMode == true
		// Player position display, show it if they have debug mode on

		// XPos display
		temp0 = player[currentPlayer].xpos
		temp0 >>= 16
		Abs(temp0)
		temp1 = screen.xsize
		temp1 -= 24
		temp1 += object.xoffset
		if object[arrayPos0].collectedEmeralds > 0
			temp2 = 28
		else
			temp2 = 13
		end if
		DrawNumbers(0, temp1, temp2, temp0, 5, 8, true)

		// YPos display
		temp0 = player[currentPlayer].ypos
		temp0 >>= 16
		Abs(temp0)
		temp2 += 16
		DrawNumbers(0, temp1, temp2, temp0, 5, 8, true)

		// Move 42 pixels to the left
		temp1 -= 42

		// Draw the "X:" and "Y:" icons
		temp2 -= 14
		// Use red variant if player is in a negative pos
		if player[currentPlayer].xpos >= 0
			DrawSpriteScreenXY(18, temp1, temp2)
		else
			DrawSpriteScreenXY(36, temp1, temp2)
		end if
		
		temp2 += 16
		if player[currentPlayer].ypos >= 0
			DrawSpriteScreenXY(19, temp1, temp2)
		else
			DrawSpriteScreenXY(37, temp1, temp2)
		end if
	end if

	// Lives icon
	temp0 = saved.character
	temp0 += 15
	temp1 = 16
	temp1 -= object.xoffset
	DrawSpriteScreenXY(temp0, temp1, 212)

	// Character text
	temp0 += 6
	temp1 += 17
	DrawSpriteScreenXY(temp0, temp1, 213)

	// Small "x" inbetween icon and text
	temp1 += 5
	DrawSpriteScreenXY(20, temp1, 222)

	// The actual player lives number
	temp1 += 18
	DrawNumbers(24, temp1, 220, player.lives, 2, 8, false)

	if saved.radar != 1
		CallFunction(EmeraldManager_DrawHUD)
	end if

	//Collected Emeralds (They will always display no matter what)
	temp0 = screen.xsize
	temp0 -= 24
	temp1 = 0
	temp2 = 8
	temp0 += object.xoffset
	while temp1 < object[arrayPos0].collectedEmeralds
		DrawSpriteScreenXY(39, temp0, temp2)
		temp0 -= 20
		temp1++
	loop

	if EmeraldManager_BonusFrame != -1
		if EmeraldManager_BonusTimer > 60
			temp0 = EmeraldManager_BonusFrame
			temp0 += 48
			DrawSpriteScreenXY(temp0, 17, 61)
		else
			GetTableValue(temp0, EmeraldManager_BonusFrame, EmeraldManager_ScoreBonuses)
			if temp0 > 9999
				// Draw 5 digits
				DrawNumbers(0, 49, 61, temp0, 5, 8, false)
			else
				// Draw 4 digits
				DrawNumbers(0, 41, 61, temp0, 4, 8, false)
			end if
		end if
	end if

	// Best Time 
	temp2 = screen.xsize
	temp2 -= 113	

	temp3 = 200

	temp0 = temp2
	temp0 += object.xoffset
	DrawSpriteScreenXY(58, temp0, temp3)

	temp2 += 40

	temp0 = temp2
	temp0 += object.xoffset
	
	DrawNumbers(0, temp0, temp3, object.minutes, 1, 8, true)
	temp0 += 24
	DrawNumbers(0, temp0, temp3, object.seconds, 2, 8, true)
	temp0 += 24
	DrawNumbers(0, temp0, temp3, object.milliSeconds, 2, 8, true)

	temp0 -= 37
	DrawSpriteScreenXY(13, temp0, temp3)

	// Ranks
	temp3 += 16
	temp0 -= 10

	DrawSpriteScreenXY(34, temp0, temp3)
end function

private function sqrt
	// Called to get the square root of a number
	
	// Preconditions:
	// - temp0 is the number to find the square root of
	
	temp1 = 0x40000000
	temp2 = 0
	while temp1 > temp0
		temp1 >>= 2
	loop

	while temp1 > 0
		temp3 = temp1
		temp3 += temp2
		if temp0 >= temp3
			temp0 -= temp3
			temp3 = temp1
			temp3 *= 2
			temp2 += temp3
		end if
		temp1 >>= 2
		temp2 >>= 1
	loop

	if temp0 > temp2
		temp2++
	end if
	temp0 = temp2
end function


// ========================
// Events
// ========================

event ObjectUpdate
	if object[30].type == TypeName[Act Finish]
		// If Act Results are sliding in, then let's slide out
		
		if object.xoffset < screen.xsize
			object.xoffset += 7
		end if
		
		if object.xoffset >= screen.xsize
			object.xoffset = screen.xsize
		end if
	end if
	
	// duh emealds
	switch object.state
	case EMERALDMANAGER_INIT
		// First, reset emerald counts
		arrayPos0 = 0x500
		temp0 = 0
		while arrayPos0 < 0x504
			object[arrayPos0].collectedEmeralds = 0
			arrayPos0++
		loop
		
		temp0 = 0
		while temp0 < EmeraldManager_EmeraldCount
			arrayPos0 = -1
			temp5 = 0
			while arrayPos0 == -1
				rand(temp2, EmeraldManager_EntityCount)
				GetTableValue(arrayPos0, temp2, EmeraldManager_ObjectPool)
				temp2 = 0
				if temp5 == 10
					temp2 = temp0
				end if
				
				while temp2 < temp0
					GetTableValue(arrayPos1, temp2, EmeraldManager_EmeraldObjects)
					if arrayPos1 == arrayPos0
						arrayPos0 = -1
						temp2 = temp0
					else
						temp3 = object[arrayPos0].xpos
						temp3 -= object[arrayPos1].xpos
						temp3 >>= 16
						temp4 = temp3
						temp3 *= temp4
						
						temp4 = object[arrayPos0].ypos
						temp4 -= object[arrayPos1].ypos
						temp4 >>= 16
						temp6 = temp4
						temp4 *= temp6
						
						temp3 += temp4
						if temp3 < EMERALDMANAGER_MINDIST
							arrayPos0 = -1
							temp2 = temp0
						end if
					end if
					
					temp2++
				loop
				
				temp5++
			loop
			
			SetTableValue(arrayPos0, temp0, EmeraldManager_EmeraldObjects)
			
			switch object[arrayPos0].type
			case TypeName[Chaos Emerald]
				object[arrayPos0].state = 1
				break
				
			case TypeName[Monitor]
				object[arrayPos0].value31 = object[arrayPos0].propertyValue
				object[arrayPos0].propertyValue = 9
				object[arrayPos0].frame = 11
				break

			end switch
			
			temp0++
		loop
		
		// Clear all unchosen Emeralds
		foreach (TypeName[Chaos Emerald], arrayPos0, ALL_ENTITIES)
			if object[arrayPos0].state == 0
				ResetObjectEntity(arrayPos0, TypeName[Blank Object], 0, 0, 0)
			end if
		next
		
		object.state++
		break
		
	case EMERALDMANAGER_MAIN
		EmeraldManager_EmeraldTimer++
		temp0 = 0
		temp4 = -1
		temp5 = 0x190000
		while temp0 < EmeraldManager_EmeraldCount
			GetTableValue(arrayPos0, temp0, EmeraldManager_EmeraldObjects)
			if arrayPos0 != -1
				temp1 = player[0].xpos
				temp1 -= object[arrayPos0].xpos
				temp1 >>= 16
				temp2 = temp1
				temp1 *= temp2
				temp2 = player[0].ypos
				temp2 -= object[arrayPos0].ypos
				temp2 >>= 16
				
				CheckCurrentStageFolder("Zone09")
				if checkResult == true
					// Account for MPZ's wrapping
					
					temp2 &= 0x7FF
					temp2 += 0xFC00
					temp2 &= 0xFFFF
					temp2 ^= 0xFC00
					if temp2 >= 0x8000
						temp2 |= 0xFFFF0000
					end if
				end if
				
				temp3 = temp2
				temp2 *= temp3
				temp1 += temp2
				temp2 = 0
				GetTableValue(temp3, temp2, EmeraldManager_DistanceLimits)
				while temp1 <= temp3
					temp2++
					GetTableValue(temp3, temp2, EmeraldManager_DistanceLimits)
				loop
				
				if temp5 > temp1
					temp4 = temp0
					temp5 = temp1
				end if
				temp2 += 38
			else
				temp2 = -1
			end if
			
			//Arrow Code
			if saved.radar == 2
				// Get the direction of the arrow, based on an xdiff/ydiff "vector" of sorts...
				
				temp1 = player[0].xpos
				temp1 -= object[arrayPos0].xpos
				
				temp3 = player[0].ypos
				temp3 -= object[arrayPos0].ypos
				
				ATan2(temp4, temp1, temp3)
				
				// Round it down to an eighth, bump it up to match Sprite Frame IDs, and then push it back up to be the second byte in the value
				temp4 >>= 5
				temp4 += 2
				temp4 <<= 8
				
				temp2 |= temp4
			end if
			
			SetTableValue(temp2, temp0, EmeraldManager_RadarFrames)
			temp0++
		loop
		
		if temp4 != -1
			EmeraldManager.pingTimer++
			temp0 = temp5
			CallFunction(sqrt)
			temp0 <<= 16 // 16.16 fixed point
			temp0 /= 0x500
			if temp0 > 0x8000
				temp0 -= 0x8000 // 0.5
				temp1 = temp0
				temp1 /= 0x28000 // 1.4
				temp0 += temp1
				temp0 += 0x4CCD // 0.3
				temp0 *= 120
			else
				temp0 *= 72
			end if
			
			temp0 >>= 16
			if temp0 < 9
				temp0 = 9
			else
				if temp0 > 76
					temp0 = 76
				end if
			end if
			
			if EmeraldManager.pingTimer >= temp0
				temp1 = 76
				temp1 -= temp0
				SetTableValue(temp1, temp4, EmeraldManager_RadarScale)
				EmeraldManager.pingTimer = 0
				if saved.radar != 1
					PlaySfx(SfxName[Radar Ping], false)
				end if
			end if
		end if
		
		arrayPos0 = 0x500
		temp0 = 0
		while arrayPos0 < 0x504
			CheckEqual(object[arrayPos0].collectedEmeralds, EmeraldManager_EmeraldCount)
			temp0 |= checkResult
			
			arrayPos0++
		loop
		
		CheckLower(EmeraldManager_GotEmeralds, 1)
		temp0 &= checkResult
		if temp0 == true
			object.state++
			object.priority = PRIORITY_ALWAYS
			stage.state = STAGE_FROZEN
			
			// Freeze the player, during the fade to white
			player[0].state = Player_State_Static
			player[0].controlMode = CONTROLMODE_NONE
			player[0].up = false
			player[0].down = false
			player[0].left = false
			player[0].right = false
			player[0].jumpPress = false
			player[0].jumpHold = false
			player[0].xvel = 0
			player[0].yvel = 0
			player[0].visible = true
			player[0].timer = 0
			player[0].blinkTimer = 0
			player[0].invincibleTimer = 30
			
			EmeraldManager.fade = 0
		end if
		break
		
	case EMERALDMANAGER_FADEOUT
		music.volume -= 2
		StopSfx(SfxName[Jump])
		
		EmeraldManager.fade += 8
		SetScreenFade(255, 255, 255, EmeraldManager.fade)
		
		if EmeraldManager.fade == 0x200
			if EmeraldManager_BonusFrame != -1
				CallFunction(EmeraldManager_AwardBonus)
			end if
			object.state++
			
			// Restore normal bounds
			stage.newXBoundary2 = tileLayer[0].xsize
			stage.newXBoundary2 <<= 7
			
			stage.newXBoundary1 = stage.newXBoundary2

			// Move the player to the ending position
			player[0].state = Player_State_Air
			player[0].xpos = EmeraldManager_EndX
			player[0].ypos = EmeraldManager_EndY
			player[0].direction = 0
			player[0].xvel = 0
			player[0].yvel = 0
			player[0].speed = 0
			player[0].invincibleTimer = 0
			
			screen[0].cameraX = player[0].xpos
			screen[0].cameraX >>= 16
			screen[0].cameraY = player[0].ypos
			screen[0].cameraY >>= 16
			
			// Clear the player's shield
			currentPlayer = 0
			player[currentPlayer].shield = 0
			arrayPos0 = playerCount
			CallFunction(Player_ApplyShield)
			
			// Resume the stage
			stage.state = STAGE_RUNNING
		end if
		break
		
	case EMERALDMANAGER_FADEIN
		EmeraldManager.fade -= 8
		SetScreenFade(255, 255, 255, EmeraldManager.fade)
		if EmeraldManager.fade == 0
			object.state++
			
			PlayMusic(TRACK_ACTFINISH)
			player[0].animation = ANI_VICTORY
			player[0].state = Player_State_Static
			
			object[30].type = TypeName[Act Finish]
			object[30].drawOrder = 6
			object[30].priority = PRIORITY_ACTIVE
		end if
		break
		
	case EMERALDMANAGER_RESULTS
		// Just chilling, no Emeralds to track, no fade to manage, living the good life
		break
		
	end switch
	
	if EmeraldManager_BonusFrame != -1
		EmeraldManager_BonusTimer--
		if EmeraldManager_BonusTimer == 0
			CallFunction(EmeraldManager_AwardBonus)
		end if
	end if
	
	temp0 = 0
	while temp0 < EmeraldManager_EmeraldCount
		GetTableValue(temp1, temp0, EmeraldManager_RadarScale)
		if temp1 > 0
			temp2 = temp1
			temp2 >>= 4
			temp1 -= temp2
			temp1--
			if temp1 < 0
				temp1 = 0
			end if
			SetTableValue(temp1, temp0, EmeraldManager_RadarScale)
		end if
		
		temp0++
	loop
end event


event ObjectDraw
	currentPlayer = screen.currentID
	
	if player[currentPlayer].rings == 0
		object.flashingTimer = oscillation
		object.flashingTimer &= 15
	else
		if stage.minutes == 9
			object.flashingTimer = oscillation
			object.flashingTimer &= 15
		end if
	end if

	CallFunction(HUD_Draw_Standard)
end event


event ObjectStartup
	LoadSpriteSheet("Global/Display.gif")

	// HUD frames
	SpriteFrame(0, 0, 8, 11, 1, 50) 	// #0  - Number 0
	SpriteFrame(0, 0, 8, 11, 10, 50) 	// #1  - Number 1
	SpriteFrame(0, 0, 8, 11, 19, 50) 	// #2  - Number 2
	SpriteFrame(0, 0, 8, 11, 28, 50) 	// #3  - Number 3
	SpriteFrame(0, 0, 8, 11, 1, 62) 	// #4  - Number 4
	SpriteFrame(0, 0, 8, 11, 10, 62) 	// #5  - Number 5
	SpriteFrame(0, 0, 8, 11, 19, 62) 	// #6  - Number 6
	SpriteFrame(0, 0, 8, 11, 28, 62) 	// #7  - Number 7
	SpriteFrame(0, 0, 8, 11, 1, 74) 	// #8  - Number 8
	SpriteFrame(0, 0, 8, 11, 10, 74) 	// #9  - Number 9
	
	SpriteFrame(0, 0, 40, 43, 1, 1) 	// #10 - Score, Time, Rings HUD text
	SpriteFrame(0, 0, 31, 11, 1, 119) 	// #11 - Red Time text
	SpriteFrame(0, 0, 39, 11, 1, 131) 	// #12 - Red Rings text
	SpriteFrame(0, 0, 29, 4, 1, 45) 	// #13 - Timer ticks
	SpriteFrame(0, 0, 3, 11, 37, 50) 	// #14 - Timer colon
	SpriteFrame(0, 0, 16, 16, 83, 18) 	// #15 - Knuckles life icon
	SpriteFrame(0, 0, 16, 16, 100, 18) 	// #16 - Tikal life icon
	SpriteFrame(0, 0, 16, 16, 117, 18) 	// #17 - Unknown life icon
	SpriteFrame(0, 0, 8, 8, 1, 98) 		// #18 - Yellow X Debug Icon
	SpriteFrame(0, 0, 8, 8, 10, 98) 	// #19 - Yellow Y Debug Icon
	SpriteFrame(0, 0, 6, 6, 19, 98) 	// #20 - Small white x Debug Icon

	SpriteFrame(0, 0, 31, 7, 185, 18) 	// #21 - Knuckles name tag
	SpriteFrame(0, 0, 31, 7, 217, 18) 	// #22 - Knuckles name tag
	SpriteFrame(0, 0, 31, 7, 217, 26) 	// #23 - Tikal name tag

	SpriteFrame(0, 0, 8, 8, 37, 64) 	// #24 - Small number 0
	SpriteFrame(0, 0, 8, 8, 46, 64) 	// #25 - Small number 1
	SpriteFrame(0, 0, 8, 8, 55, 64) 	// #26 - Small number 2
	SpriteFrame(0, 0, 8, 8, 64, 64) 	// #27 - Small number 3
	SpriteFrame(0, 0, 8, 8, 73, 64) 	// #28 - Small number 4
	SpriteFrame(0, 0, 8, 8, 82, 64) 	// #29 - Small number 5
	SpriteFrame(0, 0, 8, 8, 91, 64) 	// #30 - Small number 6
	SpriteFrame(0, 0, 8, 8, 100, 64) 	// #31 - Small number 7
	SpriteFrame(0, 0, 8, 8, 109, 64) 	// #32 - Small number 8
	SpriteFrame(0, 0, 8, 8, 118, 64) 	// #33 - Small number 9

	SpriteFrame(-1, 1, 8, 8, 127, 64) 	// 34 - Debug minus icon
	SpriteFrame(8, 0, 8, 8, 136, 64) 	// #35 - Small debug Minus sign
	SpriteFrame(0, 0, 8, 8, 25, 98) 	// #36 - Red X Debug Icon
	SpriteFrame(0, 0, 8, 8, 34, 98) 	// #37 - Red Y Debug Icon
	
	// Determine Emerald mode
	if stage.listPos == 9
		EmeraldManager_Mode = EMERALD_MODE_HPZ
	else
		if stage.listPos > 15
			EmeraldManager_Mode = EMERALD_MODE_CD
		else
			if stage.listPos > 9
				EmeraldManager_Mode = EMERALD_MODE_S1
			else
				EmeraldManager_Mode = EMERALD_MODE_S2
			end if
		end if
	end if
	
	// KEHDX TODO: i think the sprites for these got messed up somewhere along the way, like a mix of s1 and s2 sprites in MODE_S2? i (think) i (lave) fixed them, but double-run by MM or anyone else more familiar with how it should be
	switch EmeraldManager_Mode
	case EMERALD_MODE_S2 //sonk 2
	default //incase we ever add another radar
		if saved.radarstyle == 0
			// 38 - Old Emerald Radar
			SpriteFrame(-8, -8, 16, 16, 52, 290)

			// 39 - New Got Emerald
			SpriteFrame(0, 0, 16, 16, 35, 290)
		else
			// 38 - Old Emerald Radar
			SpriteFrame(-8, -8, 16, 16, 1, 290)

			// 39 - Old Got Emerald
			SpriteFrame(0, 0, 16, 16, 18, 290)
		end if
		break
		
	case EMERALD_MODE_HPZ //hidd pal
		// 38 - HPZ Shard Radar
		SpriteFrame(-8, -8, 16, 16, 1, 307)
		
		if saved.radarstyle == 0
			// 39 - New HPZ Got Shard
			SpriteFrame(0, 0, 16, 16, 35, 307)
		else
			// 39 - Old HPZ Got Shard
			SpriteFrame(0, 0, 16, 16, 18, 307)
		end if
		break
		
	case EMERALD_MODE_S1 //sonk 1
		// 38 - S1 Emerald Radar
		SpriteFrame(-8, -8, 16, 16, 103, 290)

		if saved.radarstyle == 0
			// 39 - New Got Emerald
			SpriteFrame(0, 0, 16, 16, 86, 290)
		else
			// 39 - Old Got Emerald
			SpriteFrame(0, 0, 16, 16, 69, 290)
		end if
		break
		
	case EMERALD_MODE_CD //CD-eez Nuts
		// 38 - CD Stone Radar
		SpriteFrame(-8, -8, 16, 16, 52, 307)
		
		// 39 - CD Got Stone
		SpriteFrame(0, 0, 16, 16, 69, 307)
		break

	end switch
	
	// 40-47 - Arrows
	temp0 = 0
	temp1 = 1
	while temp0 < 8
		SpriteFrame(0, -3, 16, 16, temp1, 273)
		temp1 += 17
		temp0++
	loop
	
	SpriteFrame(0, 0, 60, 11, 137, 256) 	// 48 - Perfect!
	SpriteFrame(0, 0, 62, 11, 137, 268) 	// 49 - Extreme!
	SpriteFrame(0, 0, 62, 11, 137, 280) 	// 50 - Awesome!
	SpriteFrame(0, 0, 40, 11, 137, 292) 	// 51 - Tight!
	SpriteFrame(0, 0, 55, 11, 178, 292) 	// 52 - Radical!
	SpriteFrame(0, 0, 35, 11, 137, 304) 	// 53 - Cool!
	SpriteFrame(0, 0, 55, 11, 173, 304) 	// 54 - Jammin'!
	SpriteFrame(0, 0, 33, 11, 200, 268) 	// 55 - Nice!
	SpriteFrame(0, 0, 44, 11, 200, 280) 	// 56 - Great!
	SpriteFrame(0, 0, 36, 11, 196, 256) 	// 57 - Good!
	
	SpriteFrame(0, 0, 34, 27, 157, 35)		// 58 - Best and Rank Text
	
	temp0 = 0
	temp1 = 1
	while temp0 < 7
		SpriteFrame(0, -3, 16, 16, temp1, 256) 	// 59 - 66 - S, A, B, C, D, E, F ranks
		temp1 += 17
		temp0++
	loop

	// Setup HUD values
	// This should be in object slot 9 already, the foreach is just a fancy way of checking if it even exists or not
	foreach (TypeName[HUD], arrayPos0, ALL_ENTITIES)
		object[arrayPos0].inkEffect = INK_ALPHA
		object[arrayPos0].alpha = 102
		
		arrayPos1 = 300
		arrayPos1 *= stage.listPos
		arrayPos1 += 3
		
		// Calculate time values
		
		object[arrayPos0].milliseconds = saveRAM[arrayPos1]
			
		object[arrayPos0].minutes = object[arrayPos0].milliseconds
		object[arrayPos0].minutes /= 6000
		
		object[arrayPos0].milliseconds %= 6000
		
		object[arrayPos0].seconds = object[arrayPos0].milliseconds
		object[arrayPos0].seconds /= 100
		
		object[arrayPos0].milliseconds %= 100
	next

	EmeraldManager_EntityCount = 0
	EmeraldManager_EmeraldTimer = 0
	EmeraldManager_BonusTimer = 0
	EmeraldManager_BonusFrame = -1
	EmeraldManager_GotEmeralds = 0
	
	// Determine Emerald count, from that earlier Mode
	if EmeraldManager_Mode == EMERALD_MODE_HPZ
		EmeraldManager_EmeraldCount = 5
	else
		EmeraldManager_EmeraldCount = 3
	end if
	
	temp0 = 0
	while temp0 < 5
		SetTableValue(-1, temp0, EmeraldManager_EmeraldObjects)
		SetTableValue(-1, temp0, EmeraldManager_RadarFrames)
		SetTableValue( 0, temp0, EmeraldManager_RadarScale)
		temp0++
	loop
	


end event


// ========================
// Editor Events
// ========================

event RSDKDraw
	DrawSprite(0)
end event


event RSDKLoad
	LoadSpriteSheet("Global/Display.gif")
	SpriteFrame(0, 0, 40, 43, 1, 1)
	
	// This gets set in Stage Setup, but  it's just an old CD leftover for time periods and doesn't do anything in this game
	SetVariableAlias(ALIAS_VAR_PROPVAL, "unused")
end event
