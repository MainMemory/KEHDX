//------------------Sonic CD Kanabun Script-------------------//
//--------Scripted by Christian Whitehead 'The Taxman'--------//
//-------Unpacked By Rubberduckycooly's Script Unpacker-------//

// Aliases
private alias object.value0 : Object.Timer
private alias object.value1 : Object.Angle
private alias object.value2 : Object.StartPosX
private alias object.value3 : Object.StartPosY
private alias object.value4 : Object.Depth
private alias object.value5 : Object.ReturnDrawOrder

private alias object.propertyValue : Object.Quality

// States
private alias 0 : KANABUN_FLYL
private alias 1 : KANABUN_FLYR
private alias 2 : KANABUN_OFFSCREEN

// Badnik Quality / Property Values
private alias 0 : GOOD_QUALITY
private alias 1 : BAD_QUALITY
private alias 2 : HIGH_LAYER_GOOD

// Priority
private alias 0 : PRIORITY_BOUNDS
private alias 1 : PRIORITY_ACTIVE

private alias object.value40 : player.hitboxLeft
private alias object.value38 : player.hitboxTop
private alias object.value41 : player.hitboxRight
private alias object.value39 : player.hitboxBottom

event ObjectUpdate
	if object.outOfBounds == true
		object.state = KANABUN_OFFSCREEN
		Object.Timer = 0
		Object.Angle = 256
		object.direction = FACING_RIGHT
		object.xpos = Object.StartPosX
		object.ypos = Object.StartPosY
	end if

	// The different Kanabun types have their own main update routines
	// However, their main State Switches are exactly the same

	if Object.Quality == GOOD_QUALITY
		switch object.state
		case KANABUN_FLYL
			// This Kanabun is initially given always-active priority, in order for its OOB state to work properly
			object.priority = PRIORITY_ACTIVE

			// Move left at a rate of 0.25 pixels per frame
			object.xpos -= 0x4000

			Object.Timer++
			if Object.Timer == 256
				// Turn around

				object.state = KANABUN_FLYR
				object.direction = FACING_LEFT
			end if
			break

		case KANABUN_FLYR
			// When entering this state, it is assumed that Object.Timer is already 256

			// Move right, still at a rate of 0.25 pixels per frame
			object.xpos += 0x4000

			Object.Timer--
			if Object.Timer == 0
				// Turn back around again

				object.state = KANABUN_FLYL
				object.direction = FACING_RIGHT
			end if
			break

		case KANABUN_OFFSCREEN
			// Buffer state to hold the Kanabun if it went off-screen
			if object.outOfBounds == true
				object.state = KANABUN_FLYL

				// It's safe to give it normal priority again
				object.priority = PRIORITY_BOUNDS
			end if
			break

		end switch

		// Update the Kanabun's movement angle
		Object.Angle += 4
		Object.Angle &= 511

		// And animate it, too
		object.frame = object.animationTimer
		object.frame >>= 1

		object.animationTimer++
		object.animationTimer &= 3
	else
		switch object.state
		case KANABUN_FLYL
			// Give the Kanabun active priority so that its offscreen state will work fine when needed
			//(or else the object will go offscreen and immediately pause, not returning to its original position)
			object.priority = PRIORITY_ACTIVE

			// Go left at a rate of 0.25 pixels per frame
			object.xpos -= 0x4000

			Object.Timer++
			if Object.Timer == 256
				// Turn the other way
				object.state = KANABUN_FLYR
				object.direction = FACING_LEFT
			end if
			break

		case KANABUN_FLYR
			// Object.Timer is assumed to be 256 when going into this state

			// Go right at a rate of 0.25 pixels per frame
			object.xpos += 0x4000

			Object.Timer--
			if Object.Timer == 0
				// Turn the right way again
				object.state = KANABUN_FLYL
				object.direction = FACING_RIGHT
			end if
			break

		case KANABUN_OFFSCREEN
			// Buffer state to hold the Kanabun if it went off-screen
			if object.outOfBounds == true
				object.state = KANABUN_FLYL

				// And give the object normal priority again, too
				object.priority = PRIORITY_BOUNDS
			end if
			break

		end switch

		Object.Angle += 2
		Object.Angle &= 511

		object.frame = object.animationTimer
		object.frame >>= 2
		object.frame += 6

		object.animationTimer++
		object.animationTimer &= 7
	end if

	// Make the Kanabun move around, vertically
	// Object.Depth is 0, 2, or 4, based on how into the background the Kanabun is
	// 0 for FG, 4 for furthest in the BG
	// These also correspond to Sprite Frames, with smaller sprites

	Sin(object.ypos, Object.Angle)
	if Object.Angle < 128
		object.drawOrder = 5

		Object.Depth = 0
		if object.ypos < -384
			Object.Depth = 2
		end if

		if object.ypos > 384
			Object.Depth = 2
		end if
	else
		if Object.Angle > 384
			object.drawOrder = 5

			Object.Depth = 0
			if object.ypos < -384
				Object.Depth = 2
			end if

			if object.ypos > 384
				Object.Depth = 2
			end if
		else
			object.drawOrder = Object.ReturnDrawOrder

			Object.Depth = 4
			if object.ypos < -384
				Object.Depth = 2
			end if

			if object.ypos > 384
				Object.Depth = 2
			end if
		end if
	end if

	object.frame += Object.Depth

	object.ypos <<= 13
	object.ypos += Object.StartPosY

	foreach (GROUP_PLAYERS, currentPlayer, ACTIVE_ENTITIES)


	if object.state < KANABUN_OFFSCREEN
		if Object.Depth == 0
			// If in the Foreground, then act as a normal badnik
			BoxCollisionTest(C_TOUCH, object.entityPos, -14, -14, 14, 14, currentPlayer, player[currentPlayer].hitboxLeft, player[currentPlayer].hitboxTop, player[currentPlayer].hitboxRight, player[currentPlayer].hitboxBottom)

			if checkResult == true
				CallFunction(Player_BadnikBreak)
				if object.type == TypeName[Blank Object]	
					CallFunction(EmeraldManager_AwardEmerald)	
				end if
			end if
		else
			// If in the BG, only interact with the player if the player is curled
			// (Don't want to damage them unfairly!)

			if object[currentPlayer].animation == ANI_JUMPING
				BoxCollisionTest(C_TOUCH, object.entityPos, -14, -14, 14, 14, currentPlayer, player[currentPlayer].hitboxLeft, player[currentPlayer].hitboxTop, player[currentPlayer].hitboxRight, player[currentPlayer].hitboxBottom)
				if checkResult == true
					CallFunction(Player_BadnikBreak)
					if object.type == TypeName[Blank Object]	
						CallFunction(EmeraldManager_AwardEmerald)	
					end if
				end if
			end if
		end if
	end if
	next
end event


event ObjectDraw
	if object.state < KANABUN_OFFSCREEN
		DrawSpriteFX(object.frame, FX_FLIP, object.xpos, object.ypos)
	end if
end event


event ObjectStartup
	LoadSpriteSheet("R7/Objects.gif")

	// All these Sprite Frames are in sets of 2 for all the depth levels of the Kanabun

	// "Good" Kanabun Frames

	// Nearest to the screen
	SpriteFrame(-16, -16, 32, 32, 1, 100)
	SpriteFrame(-16, -16, 32, 32, 1, 133)

	// Middle depth to the screen
	SpriteFrame(-12, -12, 24, 24, 34, 71)
	SpriteFrame(-12, -12, 27, 27, 62, 43)

	// Furthest away from the screen
	SpriteFrame(-12, -12, 24, 24, 59, 71)
	SpriteFrame(-12, -12, 24, 24, 84, 71)

	// "Bad" Kanabun Frames

	// Closest to the screen
	SpriteFrame(-16, -16, 32, 32, 1, 34)
	SpriteFrame(-16, -16, 32, 32, 1, 67)

	// Somewhat away from the screen
	SpriteFrame(-12, -12, 24, 24, 34, 18)
	SpriteFrame(-12, -12, 27, 27, 34, 43)

	// Farthest away from the screen
	SpriteFrame(-12, -12, 24, 24, 59, 18)
	SpriteFrame(-12, -12, 24, 24, 84, 18)

	// Find all Kanabun objects in the level
	foreach (TypeName[Kanabun], arrayPos0, ALL_ENTITIES)
		// Make the Kanabun start halfway across its movement cycle, right in the middle
		Object.Angle[arrayPos0] = 256

		// Store the Kanabun's starating position, not only for object resetting but also for Y movement calculations
		Object.StartPosX[arrayPos0] = object[arrayPos0].xpos
		Object.StartPosY[arrayPos0] = object[arrayPos0].ypos

		// And setup where the Kanabun's gonna fly back to, only the Good variant can go back to the higher layer
		if Object.Quality[arrayPos0] == HIGH_LAYER_GOOD
			Object.Quality[arrayPos0] = GOOD_QUALITY
			Object.ReturnDrawOrder[arrayPos0] = 3
		else
			Object.ReturnDrawOrder[arrayPos0] = 2
		end if
		CallFunction(EmeraldManager_AddEntity)
	next

end event


// ========================
// Editor Subs
// ========================




// Property Value


// Condition





// Property Value


// Condition







event RSDKDraw
	DrawSprite(Object.Quality)
end event


event RSDKLoad
	LoadSpriteSheet("R7/Objects.gif")
	SpriteFrame(-16, -16, 32, 32, 1, 100)
	SpriteFrame(-16, -16, 32, 32, 1, 34)
	SpriteFrame(-16, -16, 32, 32, 1, 100)






end event
