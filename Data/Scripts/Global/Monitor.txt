// ----------------------------------
// RSDK Project: Sonic 2
// Script Description: Monitor Object
// Script Author: Christian Whitehead/Simon Thomley
// Unpacked by Rubberduckycooly's script unpacker
// ----------------------------------

// ========================
// Aliases
// ========================
private alias object.value0  : object.contentsPos.y
private alias object.value1  : object.timer
private alias object.value3  : object.rewardPlayer
private alias object.value31 : object.altContents

// KEHDX - Set from editor to make Teleport monitors not set bounds
private alias object.value2  : object.noBounds

// Player Aliases
private alias object.propertyValue : player.character
private alias object.yvel : player.yvel
private alias object.gravity : player.gravity
private alias object.animation : player.animation
private alias object.value16 : player.isSidekick
private alias object.value17 : debugMode.currentSelection
private alias object.value25 : player.gravityStrength
private alias object.value40 : player.hitboxLeft
private alias object.value38 : player.hitboxTop
private alias object.value41 : player.hitboxRight
private alias object.value39 : player.hitboxBottom

private alias 0 : EMERALD_MODE_S2
private alias 1 : EMERALD_MODE_HPZ
private alias 2 : EMERALD_MODE_S1
private alias 3 : EMERALD_MODE_CD

// Monitor type aliases
private alias 0  : MONITOR_BLANK
private alias 1  : MONITOR_RINGS
private alias 2  : MONITOR_SHIELD_BLUE
private alias 3  : MONITOR_INVINCIBILITY
private alias 4  : MONITOR_SPEEDSHOES
private alias 5  : MONITOR_RING
private alias 6  : MONITOR_RING_1
private alias 7  : MONITOR_RING_5
private alias 8  : MONITOR_RING_15
private alias 9  : MONITOR_UNUSED // Seven ate nine, KEHDX seems to skip over this?
private alias 10 : MONITOR_RING_40
private alias 11 : MONITOR_RING_20
private alias 12 : MONITOR_EGGMAN
private alias 13 : MONITOR_TELEPORT
private alias 14 : MONITOR_RANDOM
private alias 15 : MONITOR_DEBUG_SHIELD
private alias 16 : MONITOR_DEBUG_EMERALDS
private alias 17 : MONITOR_COUNT

// Monitor states
private alias 0 : MONITOR_STATE_IDLE
private alias 1 : MONITOR_STATE_FALL

// Broken monitor states
private alias 0 : MONITOR_STATE_RISE

// Game Modes
private alias 2 : MODE_TIMEATTACK


// ========================
// Function Declarations
// ========================
reserve function Monitor_DebugDraw
reserve function Monitor_DebugSpawn


// ========================
// Static Values
// ========================

private value Monitor_startDebugID = 0


// ========================
// Tables
// ========================

// This variant uses S2 shields only
private table Monitor_RandomPool
	1, 2, 3, 4, 6, 7, 8, 10, 11, 12, 13
end table

// This table uses S3 shields as well!
private table Monitor_RingTypes
	1, 6, 7, 8, 10, 11
end table


// ========================
// Function Definitions
// ========================

private function Monitor_DebugDraw
	DrawSprite(0)
	
	temp0 = debugMode[0].currentSelection
	temp0 -= Monitor_startDebugID
	if temp0 == MONITOR_RING
		temp0 += stage.playerListPos
	else
		if temp0 > MONITOR_RING
			temp0 += 2
		end if
	end if

	temp0 += 2
	DrawSprite(temp0)
end function


private function Monitor_DebugSpawn
	temp0 = debugMode[0].currentSelection
	temp0 -= Monitor_startDebugID
	if temp0 == MONITOR_RING
		temp0 += stage.playerListPos
	else
		if temp0 > MONITOR_RING
			temp0 += 2
		end if
	end if

	CreateTempObject(TypeName[Monitor], temp0, object.xpos, object.ypos)
	object[tempObjectPos].frame = object[tempObjectPos].propertyValue
	object[tempObjectPos].frame += 2
end function


// ========================
// Events
// ========================

event ObjectUpdate
	if object.state == MONITOR_STATE_FALL
		object.yvel += 0x3800
		object.ypos += object.yvel
		if object.yvel >= 0
			ObjectTileCollision(0, 0, 16, 0)
			if checkResult == true
				object.yvel = 0
				object.state = MONITOR_STATE_IDLE
			end if
		end if
	end if
	
	if object.propertyValue == MONITOR_TELEPORT
		if object.noBounds == false
			if stage.listPos != 13
				temp0 = object.ixpos
				temp0 += 30
				stage.newXBoundary2 = temp0
			end if
		end if
		
		if object[9].state == 3
			object.type = TypeName[Blank Object]
		end if
	end if

	foreach (GROUP_PLAYERS, currentPlayer, ACTIVE_ENTITIES)
		if object.propertyValue == MONITOR_TELEPORT
			if object.noBounds == false
				temp0 = object[currentPlayer].collisionRight
				temp0 <<= 16
				temp0 += object[currentPlayer].xpos
				temp1 = stage.curXBoundary2
				temp1 <<= 16
				if temp0 > temp1
					object[currentPlayer].xvel = 0
					object[currentPlayer].speed = 0
					object[currentPlayer].xpos = temp1
					temp0 = object[currentPlayer].collisionRight
					temp0 <<= 16
					object[currentPlayer].xpos -= temp0
				end if
			end if
		end if
		
		CheckGreater(player[currentPlayer].yvel, -1)
		temp0 = checkResult
		CheckEqual(player[currentPlayer].gravity, 0)
		temp0 |= checkResult
		if temp0 == true
			CheckEqual(player[currentPlayer].animation, ANI_JUMPING)
			temp0 = checkResult
			CheckEqual(player[currentPlayer].animation, ANI_GLIDING)
			temp0 |= checkResult
			CheckEqual(player[currentPlayer].animation, ANI_GLIDING_STOP)
			temp0 |= checkResult
			if temp0 == true
				if player[currentPlayer].isSidekick == false
					BoxCollisionTest(C_TOUCH, object.entityPos, -16, -14, 16, 16, currentPlayer, player[currentPlayer].hitboxLeft, player[currentPlayer].hitboxTop, player[currentPlayer].hitboxRight, player[currentPlayer].hitboxBottom)
					if checkResult == true
						object.state = MONITOR_STATE_RISE
						CreateTempObject(TypeName[Smoke Puff], 0, object.xpos, object.ypos)
						object[tempObjectPos].drawOrder = 4
						player[currentPlayer].yvel += player[currentPlayer].gravityStrength
						player[currentPlayer].yvel += player[currentPlayer].gravityStrength
						FlipSign(player[currentPlayer].yvel)

						object.type = TypeName[Broken Monitor]
						object.rewardPlayer = currentPlayer
						if object.priority != 4
							object.priority = PRIORITY_ACTIVE
						end if

						object.alpha = 0xFF
						object.contentsPos.y = object.ypos
						object.timer = -0x30000
						switch object.propertyValue
						case MONITOR_RING
							vs.randomValue *= 0x41C64E6D
							vs.randomValue += 0x3039
							vs.randomValue &= 0x7FFFFFFF
							temp0 = vs.randomValue
							temp0 >>= 16
							temp0 %= 6
							GetTableValue(object.propertyValue, temp0, Monitor_RingTypes)
							break
							
						case 9
							CallFunction(EmeraldManager_AwardEmerald)
							object.propertyValue = 0
							break
							
						case 14
							vs.randomValue *= 0x41C64E6D
							vs.randomValue += 0x3039
							vs.randomValue &= 0x7FFFFFFF
							temp0 = vs.randomValue
							temp0 >>= 16
							temp0 %= 10
							if options.vsMode == 1
								GetTableValue(object.propertyValue, temp0, Monitor_RandomPool)
								if object.propertyValue == 13
									if object[0].controlMode == -1
										object.propertyValue = 2
									end if
									
									if object[1].controlMode == -1
										object.propertyValue = 2
									end if
									
									if object[0].state == Player_State_Static
										object.propertyValue = 1
									end if
									
									if object[1].state == Player_State_Static
										object.propertyValue = 1
									end if
								end if
							else
								GetTableValue(object.propertyValue, temp0, Monitor_RandomPool)
							end if
							break
							
						end switch
						if options.vsMode == 1
							if vs.playerID == 0
								if currentPlayer == 0
									vs.items1P++
								else
									vs.items2P++
								end if
							else
								if currentPlayer == 1
									vs.items1P++
								else
									vs.items2P++
								end if
							end if
						end if
						PlaySfx(SfxName[Destroy], 0)
					end if
				else
					BoxCollisionTest(C_SOLID, object.entityPos, -15, -14, 15, 16, currentPlayer, C_BOX, C_BOX, C_BOX, C_BOX)
				end if
			else
				BoxCollisionTest(C_SOLID, object.entityPos, -15, -14, 15, 16, currentPlayer, C_BOX, C_BOX, C_BOX, C_BOX)
			end if
		else
			BoxCollisionTest(C_SOLID, object.entityPos, -15, -16, 15, 16, currentPlayer, C_BOX, C_BOX, C_BOX, C_BOX)
			if checkResult == COL_BOTTOM
				object.state = MONITOR_STATE_FALL
				object.yvel = -0x20000
				player[currentPlayer].yvel = 0x20000
			end if
		end if
	next
end event


event ObjectDraw
	DrawSprite(0)
	
	switch StageSetup_monitorOverlayFrame
	case 0
	case 1
		break

	case 6
	case 7
		DrawSprite(1)
		break

	case 12
	case 13
		DrawSprite(2)
		break

	default
		DrawSprite(object.frame)
		
		CheckEqual(object.propertyValue, 9)
		temp0 = checkResult
		CheckEqual(stage.listPos, 9)
		temp0 &= checkResult
		if temp0 == true
			DrawSprite(19)
		end if
		break

	end switch
end event


event ObjectStartup
	LoadSpriteSheet("Global/Items.gif")
	SpriteFrame(-16, -16, 32, 32, 18, 1)
	SpriteFrame(-8, -9, 16, 14, 18, 51)
	SpriteFrame(-8, -9, 16, 14, 35, 51)
	SpriteFrame(-8, -9, 16, 14, 18, 66)
	SpriteFrame(-8, -9, 16, 14, 35, 66)
	SpriteFrame(-8, -9, 16, 14, 18, 81)
	SpriteFrame(-8, -9, 16, 14, 35, 81)
	SpriteFrame(-8, -9, 16, 14, 18, 96)
	SpriteFrame(-8, -9, 16, 14, 35, 96)
	SpriteFrame(-8, -9, 16, 14, 18, 111)
	SpriteFrame(-8, -9, 16, 14, 35, 111)

	//Emerald Monitor
	switch EmeraldManager_Mode
	case EMERALD_MODE_S1 //hedge 1
		SpriteFrame(-8, -9, 16, 14, 35, 171)
		break
	case EMERALD_MODE_CD //hedge compact disc
		SpriteFrame(-8, -9, 16, 14, 18, 186)
		break
	case EMERALD_MODE_S2 //hedge 2
	default
		SpriteFrame(-8, -9, 16, 14, 18, 141)
		break
	case EMERALD_MODE_HPZ //hedge in castle
		SpriteFrame(-8, -9, 16, 14, 35, 186)
		break
	end switch

	SpriteFrame(-8, -9, 16, 14, 35, 126)
	SpriteFrame(-8, -9, 16, 14, 18, 126)
	SpriteFrame(-8, -9, 16, 14, 35, 141)
	SpriteFrame(-8, -9, 16, 14, 18, 156)
	SpriteFrame(-8, -9, 16, 14, 35, 156)
	SpriteFrame(-8, -9, 16, 14, 18, 171)
	SpriteFrame(-8, -9, 16, 14, 35, 171)
	SpriteFrame(-8, -9, 16, 14, 35, 186) // 19

	Monitor_startDebugID = DebugMode_ObjCount
	Monitor_startDebugID--
	temp0 = MONITOR_BLANK
	while temp0 < MONITOR_COUNT
		if temp2 == true
			SetTableValue(TypeName[Monitor], DebugMode_ObjCount, DebugMode_TypesTable)
			SetTableValue(Monitor_DebugDraw, DebugMode_ObjCount, DebugMode_DrawTable)
			SetTableValue(Monitor_DebugSpawn, DebugMode_ObjCount, DebugMode_SpawnTable)
			DebugMode_ObjCount++
		end if
		temp0++
	loop
	
	foreach (TypeName[Monitor], arrayPos0, ALL_ENTITIES)
		object[arrayPos0].altContents = object[arrayPos0].propertyValue
		object[arrayPos0].altContents >>= 4
		object[arrayPos0].propertyValue &= 15
		
		if object[arrayPos0].propertyValue != MONITOR_TELEPORT
			CallFunction(EmeraldManager_AddEntity)
		else
			// In stages like ARZ it's possible to get higher than the Monitor's bounds, and go too far and die off to the far right beyond that...
			object[arrayPos0].priority = PRIORITY_XBOUNDS
		end if
		
		object[arrayPos0].frame = object[arrayPos0].propertyValue
		object[arrayPos0].frame += 2
	next
end event


event RSDKEdit
	if editor.returnVariable == true
		switch editor.variableID
		case EDIT_VAR_PROPVAL // property value
			checkResult = object.propertyValue
			break
		case 0 // contents
			checkResult = object.propertyValue
			checkResult &= 0xF
			break
		case 1 // altContents
			checkResult = object.propertyValue
			checkResult >>= 4
			checkResult &= 0xF
			break
		end switch
	else
		switch editor.variableID
		case EDIT_VAR_PROPVAL // property value
			object.propertyValue = editor.variableValue
			break
		case 0 // contents
			temp0 = editor.variableValue
			temp0 &= 0xF
			object.propertyValue &= 0xF0
			object.propertyValue |= temp0
			break
		case 1 // altContents
			temp0 = editor.variableValue
			temp0 &= 0xF
			temp0 <<= 4
			object.propertyValue &= 0xF
			object.propertyValue |= temp0
			break
		end switch
	end if
end event


event RSDKDraw
	object.frame = object.propertyValue
	object.frame &= 0xF

	DrawSprite(0)
	DrawSprite(object.frame)
end event


event RSDKLoad
	LoadSpriteSheet("Global/Items.gif")
	SpriteFrame(-16, -16, 32, 32, 18, 1)
	SpriteFrame(-8, -9, 16, 14, 18, 66)
	SpriteFrame(-8, -9, 16, 14, 35, 66)
	SpriteFrame(-8, -9, 16, 14, 18, 81)
	SpriteFrame(-8, -9, 16, 14, 35, 81)
	SpriteFrame(-8, -9, 16, 14, 18, 96)
	SpriteFrame(-8, -9, 16, 14, 35, 96)
	SpriteFrame(-8, -9, 16, 14, 18, 111)
	SpriteFrame(-8, -9, 16, 14, 35, 111)
	switch
		SpriteFrame(-8, -9, 16, 14, 18, 141) 
		break
	end switch
	SpriteFrame(-8, -9, 16, 14, 35, 126)
	SpriteFrame(-8, -9, 16, 14, 18, 126)
	SpriteFrame(-8, -9, 16, 14, 35, 141)
	SpriteFrame(-8, -9, 16, 14, 18, 156)
	SpriteFrame(-8, -9, 16, 14, 35, 156)
	SpriteFrame(-8, -9, 16, 14, 18, 171)
	SpriteFrame(-8, -9, 16, 14, 35, 171)

	AddEditorVariable("contents")
	SetActiveVariable("contents")
	AddEnumVariable("None", 0)
	AddEnumVariable("10 Rings", 1)
	AddEnumVariable("Blue Shield", 2)
	AddEnumVariable("Invincibility", 3)
	AddEnumVariable("Speed Shoes", 4)
	AddEnumVariable("1UP (Sonic)", 5)
	AddEnumVariable("1UP (Tails)", 6)
	AddEnumVariable("1UP (Knux)", 7)
	AddEnumVariable("Super", 8)
	AddEnumVariable("Bubble Shield", 9)
	AddEnumVariable("Fire Shield", 10)
	AddEnumVariable("Lightning Shield", 11)
	AddEnumVariable("Eggman", 12)
	AddEnumVariable("Teleport", 13)
	AddEnumVariable("Random", 14)
	AddEnumVariable("Shields Toggle", 15)

	AddEditorVariable("altContents")
	SetActiveVariable("altContents")
	AddEnumVariable("None", 0)
	AddEnumVariable("10 Rings", 1)
	AddEnumVariable("Blue Shield", 2)
	AddEnumVariable("Invincibility", 3)
	AddEnumVariable("Speed Shoes", 4)
	AddEnumVariable("1UP (Sonic)", 5)
	AddEnumVariable("1UP (Tails)", 6)
	AddEnumVariable("1UP (Knux)", 7)
	AddEnumVariable("Super", 8)
	AddEnumVariable("Bubble Shield", 9)
	AddEnumVariable("Fire Shield", 10)
	AddEnumVariable("Lightning Shield", 11)
	AddEnumVariable("Eggman", 12)
	AddEnumVariable("Teleport", 13)
	AddEnumVariable("Random", 14)
	AddEnumVariable("Shields Toggle", 15)
	
	SetVariableAlias(ALIAS_VAR_VAL2, "noBounds")
end event
