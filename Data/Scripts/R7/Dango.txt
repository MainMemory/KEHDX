//-------------------Sonic CD Dango Script--------------------//
//--------Scripted by Christian Whitehead 'The Taxman'--------//
//-------Unpacked By Rubberduckycooly's Script Unpacker-------//

//Karl's note: I think this isn't used in the level, I'm only doing this because it's in the
//object list and we'll probably use it if we ever do original level designs

// Aliases
private alias object.value0 : Object.Timer
private alias object.value1 : Object.XOriginPos
private alias object.value2 : Object.YOriginPos
private alias object.value3 : Object.XVelocity
private alias object.value4 : Object.ChaseChain

private alias object.propertyValue : Object.Quality

// States
private alias 0 : DANGO_WALK
private alias 1 : DANGO_CURL1
private alias 2 : DANGO_CURL2
private alias 3 : DANGO_CHARGEROLL
private alias 4 : DANGO_ROLLING
private alias 5 : DANGO_UNCURL1
private alias 6 : DANGO_UNCURL2
private alias 7 : DANGO_UNCURLED
private alias 8 : DANGO_OFFSCREEN // Unused

// Gravity
private alias 1 : GRAVITY_AIR

// Collision Sides
private alias 0 : CSIDE_FLOOR
private alias 1 : CSIDE_LWALL
private alias 2 : CSIDE_RWALL

// Badnik Quality / Property Values
private alias 0 : GOOD_QUALITY
private alias 1 : BAD_QUALITY

// Priority
private alias 0 : PRIORITY_BOUNDS
private alias 1 : PRIORITY_ACTIVE

private alias object.value40 : player.hitboxLeft
private alias object.value38 : player.hitboxTop
private alias object.value41 : player.hitboxRight
private alias object.value39 : player.hitboxBottom

event ObjectUpdate
	if Object.Quality == GOOD_QUALITY
		switch object.state
		case DANGO_WALK
			object.priority = PRIORITY_ACTIVE

			object.frame = Object.Timer
			object.frame /= 10

			Object.Timer++
			Object.Timer %= 20

			object.xpos += Object.XVelocity

			if object.direction == FACING_RIGHT
				ObjectTileGrip(CSIDE_FLOOR, -5, 15, 0)
			else
				ObjectTileGrip(CSIDE_FLOOR, 5, 15, 0)
			end if

			if checkResult == false
				FlipSign(Object.XVelocity)
				object.direction++
				object.direction &= FACING_LEFT

				Object.ChaseChain = 0
			else
				if Object.XVelocity > 0
					ObjectTileCollision(CSIDE_LWALL, 16, 8, 0)
					if checkResult == true
						FlipSign(Object.XVelocity)
						object.direction++
						object.direction &= FACING_LEFT

						Object.ChaseChain = 0
					end if
				else
					ObjectTileCollision(CSIDE_RWALL, -16, 8, 0)
					if checkResult == true
						FlipSign(Object.XVelocity)
						object.direction++
						object.direction &= FACING_LEFT

						Object.ChaseChain = 0
					end if
				end if
			end if
			break

		case DANGO_CURL1
			object.frame = 4
			if Object.Timer < 8
				Object.Timer++
			else
				Object.Timer = 0
				object.state++
			end if
			break

		case DANGO_CURL2
			object.frame = 5
			if Object.Timer < 6
				Object.Timer++
			else
				Object.Timer = 0
				object.state++
			end if
			break

		case DANGO_CHARGEROLL
			object.frame = object.animationTimer
			object.frame /= 5
			object.frame += 6

			object.animationTimer++
			object.animationTimer %= 10

			if Object.Timer < 34
				Object.Timer++
			else
				Object.Timer = 0
				object.state++
				if object.direction == FACING_RIGHT
					Object.XVelocity = -0x40000
				else
					Object.XVelocity = 0x40000
				end if
			end if
			break

		case DANGO_ROLLING
			object.frame = object.animationTimer
			object.frame /= 5
			object.frame += 6

			object.animationTimer++
			object.animationTimer %= 10

			object.xpos += Object.XVelocity

			if object.direction == FACING_RIGHT
				ObjectTileGrip(CSIDE_FLOOR, -5, 15, 0)
			else
				ObjectTileGrip(CSIDE_FLOOR, 5, 15, 0)
			end if

			if checkResult == false
				object.state++
				Object.ChaseChain++
			else
				if Object.XVelocity > 0
					ObjectTileCollision(CSIDE_LWALL, 16, 8, 0)
					if checkResult == true
						object.state++
						Object.ChaseChain++
					end if
				else
					ObjectTileCollision(CSIDE_RWALL, -16, 8, 0)
					if checkResult == true
						object.state++
						Object.ChaseChain++
					end if
				end if
			end if
			break

		case DANGO_UNCURL1
			object.frame = 5
			if Object.Timer < 6
				Object.Timer++
			else
				Object.Timer = 0
				object.state++
			end if
			break

		case DANGO_UNCURL2
			object.frame = 4
			if Object.Timer < 8
				Object.Timer++
			else
				Object.Timer = 0
				object.state++
			end if
			break

		case DANGO_UNCURLED
			object.frame = 0
			if Object.Timer < 16
				Object.Timer++
			else
				Object.Timer = 0
				object.state = DANGO_WALK
				if Object.ChaseChain > 7
					// Tried going in the same direction 8 times now...
					// Even if the player's the other way, go ahead and change directions

					object.direction++
					object.direction &= FACING_LEFT
					Object.ChaseChain = 0
				end if

				if object.direction == FACING_RIGHT
					Object.XVelocity = -0x6000
				else
					Object.XVelocity = 0x6000
				end if
			end if
			break

		case DANGO_OFFSCREEN
			// This state is unused, but it serves just about the same buffer purpose as it does with other badniks
			if object.outOfBounds == true
				object.state = DANGO_WALK
				object.priority = PRIORITY_BOUNDS
			end if
			break

		end switch
	else
		switch object.state
		case DANGO_WALK
			object.priority = PRIORITY_ACTIVE

			object.frame = Object.Timer
			object.frame /= 30
			object.frame += 2

			Object.Timer++
			Object.Timer %= 60

			object.xpos += Object.XVelocity

			if object.direction == FACING_RIGHT
				ObjectTileGrip(CSIDE_FLOOR, -5, 15, 0)
			else
				ObjectTileGrip(CSIDE_FLOOR, 5, 15, 0)
			end if

			if checkResult == false
				FlipSign(Object.XVelocity)
				object.direction++
				object.direction &= FACING_LEFT

				Object.ChaseChain = 0
			else
				if Object.XVelocity > 0
					ObjectTileCollision(CSIDE_LWALL, 16, 8, 0)
					if checkResult == true
						FlipSign(Object.XVelocity)
						object.direction++
						object.direction &= FACING_LEFT

						Object.ChaseChain = 0
					end if
				else
					ObjectTileCollision(CSIDE_RWALL, -16, 8, 0)
					if checkResult == true
						FlipSign(Object.XVelocity)
						object.direction++
						object.direction &= FACING_LEFT

						Object.ChaseChain = 0
					end if
				end if
			end if
			break

		case DANGO_CURL1
			object.frame = 4
			if Object.Timer < 20
				Object.Timer++
			else
				Object.Timer = 0
				object.state++
			end if
			break

		case DANGO_CURL2
			object.frame = 5
			if Object.Timer < 12
				Object.Timer++
			else
				Object.Timer = 0
				object.state++
			end if
			break

		case DANGO_CHARGEROLL
			object.frame = object.animationTimer
			object.frame /= 10
			object.frame += 8

			object.animationTimer++
			object.animationTimer %= 20

			if Object.Timer < 96
				Object.Timer++
			else
				Object.Timer = 0
				object.state++
				if object.direction == FACING_RIGHT
					Object.XVelocity = -0x10000
				else
					Object.XVelocity = 0x10000
				end if
			end if
			break

		case DANGO_ROLLING
			object.frame = object.animationTimer
			object.frame /= 10
			object.frame += 8

			object.animationTimer++
			object.animationTimer %= 20

			object.xpos += Object.XVelocity

			if object.direction == FACING_RIGHT
				ObjectTileGrip(CSIDE_FLOOR, -5, 15, 0)
			else
				ObjectTileGrip(CSIDE_FLOOR, 5, 15, 0)
			end if

			if checkResult == false
				object.state++
				Object.ChaseChain++
			else
				if Object.XVelocity > 0
					ObjectTileCollision(CSIDE_LWALL, 16, 8, 0)
					if checkResult == true
						object.state++
						Object.ChaseChain++
					end if
				else
					ObjectTileCollision(CSIDE_RWALL, -16, 8, 0)
					if checkResult == true
						object.state++
						Object.ChaseChain++
					end if
				end if
			end if
			break

		case DANGO_UNCURL1
			object.frame = 5
			if Object.Timer < 12
				Object.Timer++
			else
				Object.Timer = 0
				object.state++
			end if
			break

		case DANGO_UNCURL2
			object.frame = 4
			if Object.Timer < 20
				Object.Timer++
			else
				Object.Timer = 0
				object.state++
			end if
			break

		case DANGO_UNCURLED
			object.frame = 2
			if Object.Timer < 64
				Object.Timer++
			else
				Object.Timer = 0
				object.state = DANGO_WALK
				if Object.ChaseChain > 7
					// Been going in the same direction for 8 cycles now...
					// Even if it may be opposite of the player, go ahead and change directions because much isn't happening now anyways

					object.direction++
					object.direction &= FACING_LEFT

					Object.ChaseChain = 0
				end if

				if object.direction == FACING_RIGHT
					Object.XVelocity = -0x1000
				else
					Object.XVelocity = 0x1000
				end if
			end if
			break

		case DANGO_OFFSCREEN
			// This state is unused as Dango uses a simpler OOB process instead
			if object.outOfBounds == true
				object.state = DANGO_WALK
				object.priority = PRIORITY_BOUNDS
			end if
			break

		end switch
	end if

	// See if the Dango is out of bounds
	if object.outOfBounds == true

		// If it is, then see if its starting position is out of bounds too
		temp0 = object.xpos
		temp1 = object.ypos

		object.xpos = Object.XOriginPos
		object.ypos = Object.YOriginPos

		if object.outOfBounds == true
			// It is too, so in that case it's clear to restore the Dango to its original spot
			object.priority = PRIORITY_BOUNDS
			object.state = DANGO_WALK
			Object.Timer = 0
			object.direction = FACING_RIGHT

			Object.ChaseChain = 0

			if Object.Quality == GOOD_QUALITY
				Object.XVelocity = -0x6000
			else
				Object.XVelocity = -0x1000
			end if
		else
			// Nope not ready yet, move back

			object.xpos = temp0
			object.ypos = temp1
		end if
	end if

	foreach (GROUP_PLAYERS, currentPlayer, ACTIVE_ENTITIES)

	if object.state == DANGO_WALK
		// If the Dango's just wandering, then check to see if the player's stepped within activation range
		if object.direction == FACING_RIGHT
			BoxCollisionTest(C_TOUCH, object.entityPos, -112, -128, 0, 128, currentPlayer, player[currentPlayer].hitboxLeft, player[currentPlayer].hitboxTop, player[currentPlayer].hitboxRight, player[currentPlayer].hitboxBottom)
		else
			BoxCollisionTest(C_TOUCH, object.entityPos, 0, -128, 112, 128, currentPlayer, player[currentPlayer].hitboxLeft, player[currentPlayer].hitboxTop, player[currentPlayer].hitboxRight, player[currentPlayer].hitboxBottom)
		end if

		if checkResult == true
			// On the attack!
			object.state = DANGO_CURL1
		end if
	end if

	switch object.state
	case DANGO_WALK
	case DANGO_CURL1
	case DANGO_CURL2
	case DANGO_UNCURL1
	case DANGO_UNCURL2
	case DANGO_UNCURLED
		// The Dango is in a breakable form, so just check for simple badnik breaking

		BoxCollisionTest(C_TOUCH, object.entityPos, -14, -10, 14, 10, currentPlayer, player[currentPlayer].hitboxLeft, player[currentPlayer].hitboxTop, player[currentPlayer].hitboxRight, player[currentPlayer].hitboxBottom)

		if checkResult == true
			CallFunction(Player_BadnikBreak)
			if object.type == TypeName[Blank Object]	
				CallFunction(EmeraldManager_AwardEmerald)	
			end if
		end if
		break

	case DANGO_CHARGEROLL
		BoxCollisionTest(C_TOUCH, object.entityPos, -14, -10, 14, 10, currentPlayer, player[currentPlayer].hitboxLeft, player[currentPlayer].hitboxTop, player[currentPlayer].hitboxRight, player[currentPlayer].hitboxBottom)

		if checkResult == true
			CheckEqual(object[currentPlayer].animation, ANI_JUMPING)
			temp0 = checkResult
			CheckEqual(object[currentPlayer].animation, ANI_SPINDASH)
			temp0 |= checkResult
			if temp0 == true
				// The player's rolled towards the Dango, so bounce the player back
				object[currentPlayer].speed = object[currentPlayer].xpos
				object[currentPlayer].speed -= object.xpos
				object[currentPlayer].speed >>= 2

				object[currentPlayer].xvel = object[currentPlayer].speed

				// Account for aerial bouncing too if needed
				if object[currentPlayer].gravity == GRAVITY_AIR
					object[currentPlayer].yvel = object[currentPlayer].ypos
					object[currentPlayer].yvel -= object.ypos
					object[currentPlayer].yvel >>= 2
				end if
			else
				// Hurt the player
				// (Note that there are edge cases with Tails where he may end up breaking the Dango with his tails, instead)
				CallFunction(Player_BadnikBreak)
				if object.type == TypeName[Blank Object]	
					CallFunction(EmeraldManager_AwardEmerald)	
				end if
			end if
		end if
		break

	case DANGO_ROLLING
		BoxCollisionTest(C_TOUCH, object.entityPos, -14, -10, 14, 10, currentPlayer, player[currentPlayer].hitboxLeft, player[currentPlayer].hitboxTop, player[currentPlayer].hitboxRight, player[currentPlayer].hitboxBottom)
		if checkResult == true
			CheckEqual(object[currentPlayer].animation, ANI_JUMPING)
			temp0 = checkResult
			CheckEqual(object[currentPlayer].animation, ANI_SPINDASH)
			temp0 |= checkResult
			if temp0 == true
				// The player's rolled towards the Dango, so recoil the both of them

				Object.XVelocity = object[currentPlayer].xvel
				object[currentPlayer].speed = object[currentPlayer].xpos
				object[currentPlayer].speed -= object.xpos
				object[currentPlayer].speed >>= 2
				object[currentPlayer].xvel = object[currentPlayer].speed

				if object[currentPlayer].gravity == GRAVITY_AIR
					// Account for Y recoil, too
					object[currentPlayer].yvel = object[currentPlayer].ypos
					object[currentPlayer].yvel -= object.ypos
					object[currentPlayer].yvel >>= 2
				else
					// The player is on the ground, make them bounce back rolling
					object[currentPlayer].state = Player_State_Roll
					object[currentPlayer].animation = ANI_JUMPING
				end if
			else
				// Hurt the player
				// (See above note about Tails's fluffy but dangerous parts)
				// karl: best dev note ever
				CallFunction(Player_BadnikBreak)
				if object.type == TypeName[Blank Object]	
					CallFunction(EmeraldManager_AwardEmerald)	
				end if
			end if
		end if
		break

	end switch
	next
end event


event ObjectDraw
	if object.state < DANGO_OFFSCREEN
		DrawSpriteFX(object.frame, FX_FLIP, object.xpos, object.ypos)
	end if
end event


event ObjectStartup
	LoadSpriteSheet("R7/Objects.gif")

	// Dango Frames

	// 0-1 - Idle Animation, "Good" variant
	SpriteFrame(-16, -7, 32, 24, 116, 121)
	SpriteFrame(-16, -7, 32, 24, 149, 121)

	// 2-3 - Idle Animation, "Bad" variant (version with the cracked shell frames)
	SpriteFrame(-16, -7, 32, 24, 116, 146)
	SpriteFrame(-16, -7, 32, 24, 149, 146)

	// 4-5 - Curl
	SpriteFrame(-16, -16, 32, 32, 51, 219)
	SpriteFrame(-16, -16, 32, 32, 84, 219)

	// 6-9 - Rolling Frames
	SpriteFrame(-16, -15, 32, 32, 51, 186)
	SpriteFrame(-16, -15, 32, 32, 117, 186)
	SpriteFrame(-16, -16, 32, 32, 84, 186)
	SpriteFrame(-16, -15, 32, 32, 51, 186)

	// Dingo Dango

	foreach (TypeName[Dango], arrayPos0, ALL_ENTITIES)
		// Set the Dango's initial positions
		Object.XOriginPos[arrayPos0] = object[arrayPos0].xpos
		Object.YOriginPos[arrayPos0] = object[arrayPos0].ypos

		// Set its starting velocity too, "Bad" Dangos go slower than "Good" ones since they're, y'know, "Bad"
		if Object.Quality[arrayPos0] == GOOD_QUALITY
			// Speed of 0.375 pixels per frame
			Object.XVelocity[arrayPos0] = -0x6000
		else
			// 0.0625 pixels per frame... that's hardly anything!
			Object.XVelocity[arrayPos0] = -0x1000
		end if
	next

end event


// ========================
// Editor Subs
// ========================




// Property Value
// Condition





// Property Value
// Condition







event RSDKDraw
	DrawSprite(Object.Quality)
end event


event RSDKLoad
	LoadSpriteSheet("R7/Objects.gif")
	SpriteFrame(-16, -7, 32, 24, 116, 121) // Normal "Good" version
	SpriteFrame(-16, -7, 32, 24, 116, 146) // Cracked "Bad" version





end event
