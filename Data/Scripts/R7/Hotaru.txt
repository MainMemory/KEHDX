//-------------------Sonic CD Hotaru Script-------------------//
//--------Scripted by Christian Whitehead 'The Taxman'--------//
//-------Unpacked By Rubberduckycooly's Script Unpacker-------//

// Some notes:
// - This single "Hotaru" Object controls two Hotaru badniks in gameplay
//    - Both of these Hotarus are localised entirely within this single "Hotaru" Object
// - However, even with this, "Hotaru" Object in the scene should be followed by two Blank Objects
//    - This is needed for spawning flowers, since each individual Hotaru drops its own Flower
//    - This base Hotaru object will never become a Flower, but it will become a Blank Object if its Hotarus are both destroyed

// Aliases

private alias object.value0 : Object.Timer
private alias object.value1 : Object.StartPosX
private alias object.value2 : Object.StartPosY
// Stored as offsets from the base Hotaru object, not complete positions
private alias object.value3 : Object.Hotaru1X
private alias object.value4 : Object.Hotaru2X
// Bit-field that represents the state of the active Hotarus, bit 0 is Hotaru 1 and bit 1 is Hotaru 2
private alias object.value5 : Object.ActiveHotarus
private alias object.value6 : Object.EletricityActive
// Y-Offset, half the distance between the two Hotarus
private alias object.value7 : Object.HotaruRadius

private alias object.propertyValue : Object.Quality

// Player Aliases
// WARNING: Variable VAR_PLAYERVALUE4 does not exist in RSDKv4!
private alias object[currentPlayer].value7 : Player.InvincibleTimer

// Hotaru States
private alias 0 : HOTARU_IDLE1
private alias 1 : HOTARU_IDLE2
private alias 2 : HOTARU_TRACKPLAYER
private alias 3 : HOTARU_PAUSE
private alias 4 : HOTARU_LIGHTSON1
private alias 5 : HOTARU_LIGHTSOFF1
private alias 6 : HOTARU_LIGHTSON2
private alias 7 : HOTARU_LIGHTSOFF2
private alias 8 : HOTARU_LIGHTSON3
private alias 9 : HOTARU_LIGHTSOFF3
private alias 10 : HOTARU_FLASHING
private alias 11 : HOTARU_FLYAWAY
private alias 12 : HOTARU_OFFSCREEN

// Global SFX
private alias 8 : SFX_G_DESTROY

// Badnik Quality / Property Values
private alias 0 : GOOD_QUALITY
private alias 1 : BAD_QUALITY

// Priority
private alias 0 : PRIORITY_BOUNDS
private alias 1 : PRIORITY_ACTIVE

private alias object.value40 : player.hitboxLeft
private alias object.value38 : player.hitboxTop
private alias object.value41 : player.hitboxRight
private alias object.value39 : player.hitboxBottom

// Function declarations
reserve function Hotaru_HotaruBreak


public function Hotaru_HotaruBreak

	// This function is called to see if the individual Hotaru being checked should break

	// Preconditions:
	// - Object.XPos & Object.YPos are set to the positions of the Hotaru being checked (not the base Hotaru object!)
	// - ArrayPos1 is the EntityNo of where to spawn the Hotaru, if it needs to be broken

	CheckEqual(object[currentPlayer].animation, ANI_JUMPING)
	temp0 = checkResult
	CheckEqual(object[currentPlayer].animation, ANI_SPINDASH)
	temp0 |= checkResult

	//enchinda animations
	CheckEqual(object[currentPlayer].animation, ANI_GLIDING)
	temp0 |= checkResult
	CheckEqual(object[currentPlayer].animation, ANI_GLIDING_STOP)
	temp0 |= checkResult

	if object[currentPlayer].animation == ANI_FLYING
		CheckGreater(object[currentPlayer].ypos, object.ypos)
		temp0 |= checkResult
	end if

	// Notably, the invincibility granted by time warping isn't granted here...

	if temp0 == true
		ResetObjectEntity(arrayPos1, animaltype1, 0, object.xpos, object.ypos)
		object[arrayPos1].drawOrder = 4

		CreateTempObject(TypeName[Smoke Puff], 0, object.xpos, object.ypos)
		object[TempObjectPos].drawOrder = 4

		CreateTempObject(TypeName[Object Score], object[26].value0, object.xpos, object.ypos)
		object[TempObjectPos].drawOrder = 4

		PlaySfx(SFX_G_DESTROY, false)

		if object[currentPlayer].yvel > 0
			FlipSign(object[currentPlayer].yvel)
		else
			object[currentPlayer].yvel += 0xC000
		end if

		// Grant the player some score
		switch object[26].value0
		case 0
			Player.Score += 100
			break

		case 1
			Player.Score += 200
			break

		case 2
			Player.Score += 500
			break

		case 3
			Player.Score += 1000
			break

		end switch
	else
		arrayPos0 = object[currentPlayer].entityPos
		arrayPos0 += 2
		if object[arrayPos0].type == TypeName[Invincibility]
			ResetObjectEntity(arrayPos1, animaltype1, 0, object.xpos, object.ypos)
			object[arrayPos1].drawOrder = 4

			CreateTempObject(TypeName[Smoke Puff], 0, object.xpos, object.ypos)
			object[TempObjectPos].drawOrder = 4

			CreateTempObject(TypeName[Object Score], object[26].value0, object.xpos, object.ypos)
			object[TempObjectPos].drawOrder = 4

			PlaySfx(SFX_G_DESTROY, false)

			if object[currentPlayer].yvel > 0
				FlipSign(object[currentPlayer].yvel)
			end if

			// Grant the player's score
			switch object[26].value0
			case 0
				Player.Score += 100
				break

			case 1
				Player.Score += 200
				break

			case 2
				Player.Score += 500
				break

			case 3
				Player.Score += 1000
				break

			end switch
		else
			if object.state > HOTARU_LIGHTSOFF3
				if Player.InvincibleTimer == 0
					object[currentPlayer].state = Player_State_GotHit
					if object[currentPlayer].xpos > object.xpos
						object[currentPlayer].speed = 0x20000
					else
						object[currentPlayer].speed = -0x20000
					end if
				end if
			end if
		end if
	end if

end function


event ObjectUpdate
	if object.outOfBounds == true
		object.state = HOTARU_OFFSCREEN
		Object.Timer = 0

		// Set the object back to its starting position
		// Note that the Hotarus' state being set to HOTARU_OFFSCREEN means that there won't be any visible teleporting
		object.xpos = Object.StartPosX
		object.ypos = Object.StartPosY

		// Reset the Hotarus to be 70 pixels apart
		// (Regardless of their Property Value, since that's already been reset...)
		Object.Hotaru1X = -0x230000
		Object.Hotaru2X = 0x230000

		Object.EletricityActive = false
	end if

	// Even if there are really only small differences between the two's behaviours, the GOOD and BAD badnik types just have entirely different
	if Object.Quality == GOOD_QUALITY
		switch object.state
		case HOTARU_IDLE1
			object.priority = PRIORITY_ACTIVE

			// Right range of 43 pixels for Hotaru 1
			if Object.Hotaru1X < 0x2B0000
				// Move both Hotarus in their respective directions by a pixel
				Object.Hotaru1X += 0x10000
				Object.Hotaru2X -= 0x10000
			else
				// Turn around
				object.state = HOTARU_IDLE2
			end if
			break

		case HOTARU_IDLE2
			// Left range of 115 pixels for Hotaru 1
			if Object.Hotaru1X > -0x730000
				// Move both Hotarus in their respective directions by a pixel
				Object.Hotaru1X -= 0x10000
				Object.Hotaru2X += 0x10000
			else
				// Turn around
				object.state = HOTARU_IDLE1
			end if
			break

		case HOTARU_TRACKPLAYER
			// Make the Hotarus follow the screen

			temp0 = screen.xoffset
			temp0 += screen.xcenter
			temp0 <<= 16
			temp1 = false
			if object.xpos < temp0
				object.xpos += 0x20000
				if object.xpos >= temp0
					object.xpos = temp0
					temp1 = true
				end if
			else
				object.xpos -= 0x20000
				if object.xpos <= temp0
					object.xpos = temp0
					temp1 = true
				end if
			end if

			temp0 = screen.yoffset
			temp0 += 104
			temp0 <<= 16
			if object.ypos < temp0
				object.ypos += 0x20000
				if object.ypos >= temp0
					object.ypos = temp0
					if temp1 == true
						// In a good position, advance states
						object.state++
					end if
				end if
			else
				object.ypos -= 0x20000
				if object.ypos <= temp0
					object.ypos = temp0
					if temp1 == true
						// In a good position, advance states
						object.state++
					end if
				end if
			end if
			break

		case HOTARU_PAUSE
			if Object.Timer < 100
				Object.Timer++
			else
				Object.Timer = 0
				object.state++
			end if
			object.frame = Object.Timer
			object.frame %= 20
			object.frame /= 10
			object.frame++
			break

			// A series of very small and similar states - each frame in the flicker animation is its own state

		case HOTARU_LIGHTSON1
			if Object.Timer < 4
				Object.Timer++
			else
				Object.Timer = 0
				object.state++
			end if
			break

		case HOTARU_LIGHTSOFF1
			if Object.Timer < 12
				Object.Timer++
			else
				Object.Timer = 0
				object.state++
			end if
			break

		case HOTARU_LIGHTSON2
			if Object.Timer < 8
				Object.Timer++
			else
				Object.Timer = 0
				object.state++
			end if
			break

		case HOTARU_LIGHTSOFF2
			if Object.Timer < 8
				Object.Timer++
			else
				Object.Timer = 0
				object.state++
			end if
			break

		case HOTARU_LIGHTSON3
			if Object.Timer < 12
				Object.Timer++
			else
				Object.Timer = 0
				object.state++
			end if
			break

		case HOTARU_LIGHTSOFF3
			if Object.Timer < 4
				Object.Timer++
			else
				Object.Timer = 0
				object.animationTimer = 0
				object.state++
			end if
			break

		case HOTARU_FLASHING
			// This is the state where the Sparks are active, although none of them are managed here
			// Head over to ObjectDraw and ObjectPlayerInteraction for that
			// (Or don't... it's not like the sparks even work right...)

			if Object.Timer < 100
				Object.Timer++
			else
				Object.Timer = 0
				object.state++
			end if
			object.frame = Object.Timer
			object.frame %= 20
			object.frame /= 10
			object.frame++
			break

		case HOTARU_FLYAWAY
			// Ascend at a rate of 2 pixels per second
			// (This is rather slow, isn't it?)
			object.ypos -= 0x20000

			// Animate the Object
			Object.Timer++
			Object.Timer %= 20
			object.frame = Object.Timer
			object.frame /= 10
			object.frame++

			if object.outOfBounds == true
				object.state = HOTARU_OFFSCREEN
				Object.Timer = 0

				// Place the Hotaru back at its starting position
				// Since state is being set to HOTARU_OFFSCREEN, there won't be any visible teleporting
				object.xpos = Object.StartPosX
				object.ypos = Object.StartPosY

				// Reset the Hotarus to be 70 pixels apart
				// (Regardless of their initial Property Value, since that's already been reset)
				Object.Hotaru1X = -0x230000
				Object.Hotaru2X = 0x230000
			end if
			break

		case HOTARU_OFFSCREEN
			// This state is here so that, if the Hotarus' start position is within bounds, they won't just suddently teleport in front of the player
			if object.outOfBounds == true
				object.state = HOTARU_IDLE1
				object.priority = PRIORITY_BOUNDS
				object.frame = 0
			end if
			break

		end switch
	else
		switch object.state
		case HOTARU_IDLE1
			object.priority = PRIORITY_ACTIVE

			object.frame = 3

			// Right range of 43 pixels for Hotaru 1
			if Object.Hotaru1X < 0x2B0000
				// Move both Hotarus in their respective directions by a half pixel
				Object.Hotaru1X += 0x8000
				Object.Hotaru2X -= 0x8000
			else
				// Turn around
				object.state = HOTARU_IDLE2
			end if
			break

		case HOTARU_IDLE2
			// Left range of 115 pixels for Hotaru 1
			if Object.Hotaru1X > -0x730000
				// Move both Hotarus in their respective directions by a half pixel
				Object.Hotaru1X -= 0x8000
				Object.Hotaru2X += 0x8000
			else
				// Turn around again
				object.state = HOTARU_IDLE1
			end if
			break

		case HOTARU_TRACKPLAYER
			// Make the Hotarus follow the screen

			temp0 = screen.xoffset
			temp0 += screen.xcenter
			temp0 <<= 16
			temp1 = false
			if object.xpos < temp0
				object.xpos += 0x10000
				if object.xpos >= temp0
					object.xpos = temp0
					temp1 = true
				end if
			else
				object.xpos -= 0x10000
				if object.xpos <= temp0
					object.xpos = temp0
					temp1 = true
				end if
			end if

			temp0 = screen.yoffset
			temp0 += 104
			temp0 <<= 16
			if object.ypos < temp0
				object.ypos += 0x10000
				if object.ypos >= temp0
					object.ypos = temp0
					if temp1 == true
						object.state++
					end if
				end if
			else
				object.ypos -= 0x10000
				if object.ypos <= temp0
					object.ypos = temp0
					if temp1 == true
						object.state++
					end if
				end if
			end if
			break

		case HOTARU_PAUSE
			if Object.Timer < 100
				Object.Timer++
			else
				Object.Timer = 0
				object.state++
			end if
			object.frame = Object.Timer
			object.frame %= 40
			object.frame /= 20
			object.frame += 4
			break

			// A series of very small and similar states - each frame in the flicker animation is its own state

		case HOTARU_LIGHTSON1
			if Object.Timer < 10
				Object.Timer++
			else
				Object.Timer = 0
				object.state++
			end if
			break

		case HOTARU_LIGHTSOFF1
			if Object.Timer < 30
				Object.Timer++
			else
				Object.Timer = 0
				object.state++
			end if
			break

		case HOTARU_LIGHTSON2
			if Object.Timer < 20
				Object.Timer++
			else
				Object.Timer = 0
				object.state++
			end if
			break

		case HOTARU_LIGHTSOFF2
			if Object.Timer < 20
				Object.Timer++
			else
				Object.Timer = 0
				object.state++
			end if
			break

		case HOTARU_LIGHTSON3
			if Object.Timer < 30
				Object.Timer++
			else
				Object.Timer = 0
				object.state++
			end if
			break

		case HOTARU_LIGHTSOFF3
			if Object.Timer < 10
				Object.Timer++
			else
				Object.Timer = 0
				object.animationTimer = 0
				object.state++
			end if
			break

		case HOTARU_FLASHING
			// This is the state where the Sparks are active, but Bad Hotarus have broken bulbs so they don't get to light up...

			if Object.Timer < 200
				Object.Timer++
			else
				Object.Timer = 0
				object.state++
			end if
			object.frame = Object.Timer
			object.frame %= 40
			object.frame /= 20
			object.frame += 4
			break

		case HOTARU_FLYAWAY
			// Ascend at a rate of 2 pixels per second
			// (This is rather slow, isn't it?)
			object.ypos -= 0x20000

			// Animate the Object
			Object.Timer++
			Object.Timer %= 40
			object.frame = Object.Timer
			object.frame /= 20
			object.frame += 4

			if object.outOfBounds == true
				object.state = HOTARU_OFFSCREEN
				Object.Timer = 0

				// Place the Hotarus back at their starting positions
				// State's being set to HOTARU_OFFSCREEN so that there won't be any visible teleporting
				object.xpos = Object.StartPosX
				object.ypos = Object.StartPosY

				// Reset the Hotarus to be 70 pixels apart
				// (Ignoring their Property Value, since it got replaced by Hotaru Condition during startup)
				Object.Hotaru1X = -0x230000
				Object.Hotaru2X = 0x230000
			end if
			break

		case HOTARU_OFFSCREEN
			// This state is here so that, if the Hotarus' start position is within bounds, they won't just suddently teleport in front of the player
			if object.outOfBounds == true
				object.state = HOTARU_IDLE1
				object.priority = PRIORITY_BOUNDS
				object.frame = 0
			end if
			break

		end switch
	end if

	if Object.ActiveHotarus == 0
		// If this object doesn't have any more alive Hotarus, than just unload now as it serves no purpose
		ResetObjectEntity(object.entityPos, TypeName[Blank Object], 0, 0, 0)
	end if

	foreach (GROUP_PLAYERS, currentPlayer, ACTIVE_ENTITIES)

	switch object.state
	case HOTARU_IDLE1
	case HOTARU_IDLE2
		// Wandering around aimlessly, just check to see if the player's entered the Hotarus' general range yet
		BoxCollisionTest(C_TOUCH, object.entityPos, -64, -64, 64, 64, currentPlayer, player[currentPlayer].hitboxLeft, player[currentPlayer].hitboxTop, player[currentPlayer].hitboxRight, player[currentPlayer].hitboxBottom)
		if checkResult == true
			// Player stepped within range, start following them...
			object.state = HOTARU_TRACKPLAYER
		end if
		break

	case HOTARU_LIGHTSON2
	case HOTARU_LIGHTSOFF2
	case HOTARU_LIGHTSON3
	case HOTARU_LIGHTSOFF3
		if Object.Quality == GOOD_QUALITY
			// Broken Hotarus don't have functional lights...

			if Object.Hotaru1X < 0
				temp0 = Object.Hotaru1X
				temp0 >>= 16
				temp1 = Object.Hotaru2X
				temp1 >>= 16
			else
				temp0 = Object.Hotaru2X
				temp0 >>= 16
				temp1 = Object.Hotaru1X
				temp1 >>= 16
			end if

			temp0 += 8
			temp1 -= 8

			BoxCollisionTest(C_TOUCH, object.entityPos, temp0, -60, temp1, 60, currentPlayer, player[currentPlayer].hitboxLeft, player[currentPlayer].hitboxTop, player[currentPlayer].hitboxRight, player[currentPlayer].hitboxBottom)

			if checkResult == true
				// Player's within the sensor range, turn on the lights
				Object.EletricityActive = true
			end if

		end if
		// No break?
		// Well, I suppose it's not too important...

	end switch

	// Don't do any of these further checks if the Hotaru's not even existent
	if object.state < HOTARU_OFFSCREEN

		// Backup the base object's position
		temp6 = object.xpos
		temp7 = object.ypos

		// Check collision for Hotaru 1
		GetBit(temp1, Object.ActiveHotarus, 0)
		if temp1 == true

			// Adjust the object's position to match that of Hotaru 1
			object.xpos += Object.Hotaru1X
			object.ypos -= Object.HotaruRadius

			// Check if there was collision
			BoxCollisionTest(C_TOUCH, object.entityPos, -8, -8, 8, 8, currentPlayer, player[currentPlayer].hitboxLeft, player[currentPlayer].hitboxTop, player[currentPlayer].hitboxRight, player[currentPlayer].hitboxBottom)

			if checkResult == true
				// Check if the Hotaru should be broken

				arrayPos1 = object.entityPos
				arrayPos1++
				CallFunction(Hotaru_HotaruBreak)

				if object[+1].type == animaltype1
					// The Hotaru was destroyed, blank its according bit
					SetBit(Object.ActiveHotarus, 0, false)
				end if
			end if

			// Restore the Object's position to what it was before
			object.xpos = temp6
			object.ypos = temp7
		end if

		// Check collision for Hotaru 2
		GetBit(temp1, Object.ActiveHotarus, 1)
		if temp1 == true

			// Adjust the Object's Position to be where Hotaru 2 is
			object.xpos += Object.Hotaru2X
			object.ypos += Object.HotaruRadius

			// Check for collision against this Hotaru
			BoxCollisionTest(C_TOUCH, object.entityPos, -8, -8, 8, 8, currentPlayer, player[currentPlayer].hitboxLeft, player[currentPlayer].hitboxTop, player[currentPlayer].hitboxRight, player[currentPlayer].hitboxBottom)

			if checkResult == true
				// Check if the Hotaru should be destroyed or hurt the player

				arrayPos1 = object.entityPos
				arrayPos1 += 2
				CallFunction(Hotaru_HotaruBreak)

				if object[+2].type == animaltype1
					// The Hotaru was destroyed, blank its according bit
					SetBit(Object.ActiveHotarus, 1, false)
				end if
			end if
		end if

		// If needed, check for the Sparks
		if object.state == HOTARU_FLASHING
			if Object.EletricityActive == true

				// That is to say, are both Hotarus active? (3 is 0b11 in bits)
				if Object.ActiveHotarus == 3

					// Check collision for the Sparks

					// First, backup the object's position
					object.xpos = temp6
					object.ypos = temp7

					// Check collision for the middle Spark
					BoxCollisionTest(C_TOUCH, object.entityPos, -12, -12, 12, 12, currentPlayer, player[currentPlayer].hitboxLeft, player[currentPlayer].hitboxTop, player[currentPlayer].hitboxRight, player[currentPlayer].hitboxBottom)

					if checkResult == true
						CallFunction(Player_Hit)
					end if

					// Check collision for the left Spark

					object.xpos = temp6
					object.xpos >>= 1

					temp1 = temp6
					temp1 += Object.Hotaru1X
					temp1 >>= 1

					object.xpos += temp1
					object.ypos = temp7
					object.ypos >>= 1

					temp1 = temp7
					temp1 -= Object.HotaruRadius
					temp1 >>= 1

					object.ypos += temp1

					BoxCollisionTest(C_TOUCH, object.entityPos, -12, -12, 12, 12, currentPlayer, player[currentPlayer].hitboxLeft, player[currentPlayer].hitboxTop, player[currentPlayer].hitboxRight, player[currentPlayer].hitboxBottom)


					if checkResult == true
						CallFunction(Player_Hit)
					end if

					// Check collision for the right Spark

					object.xpos = temp6
					object.xpos >>= 1

					temp1 = temp6
					temp1 += Object.Hotaru2X
					temp1 >>= 1

					object.xpos += temp1
					object.ypos = temp7
					object.ypos >>= 1

					temp1 = temp7
					temp1 += Object.HotaruRadius
					temp1 >>= 1

					object.ypos += temp1

					BoxCollisionTest(C_TOUCH, object.entityPos, -12, -12, 12, 12, currentPlayer, player[currentPlayer].hitboxLeft, player[currentPlayer].hitboxTop, player[currentPlayer].hitboxRight, player[currentPlayer].hitboxBottom)


					if checkResult == true
						CallFunction(Player_Hit)
					end if

				end if
			end if
		end if

		// Restore the base object's position to what it should be
		object.xpos = temp6
		object.ypos = temp7

	end if

end event


event ObjectDraw
	switch object.state
	case HOTARU_IDLE1
		GetBit(checkResult, Object.ActiveHotarus, 0)
		if checkResult == true
			temp0 = Object.Hotaru1X
			temp0 += object.xpos
			temp1 = object.ypos
			temp1 -= Object.HotaruRadius
			object.direction = FACING_LEFT
			DrawSpriteFX(object.frame, FX_FLIP, temp0, temp1)
		end if

		GetBit(checkResult, Object.ActiveHotarus, 1)
		if checkResult == true
			temp0 = Object.Hotaru2X
			temp0 += object.xpos
			temp1 = object.ypos
			temp1 += Object.HotaruRadius
			object.direction = FACING_RIGHT
			DrawSpriteFX(object.frame, FX_FLIP, temp0, temp1)
		end if
		break

	case HOTARU_IDLE2
		GetBit(checkResult, Object.ActiveHotarus, 0)
		if checkResult == true
			temp0 = Object.Hotaru1X
			temp0 += object.xpos
			temp1 = object.ypos
			temp1 -= Object.HotaruRadius
			object.direction = FACING_RIGHT
			DrawSpriteFX(object.frame, FX_FLIP, temp0, temp1)
		end if

		GetBit(checkResult, Object.ActiveHotarus, 1)
		if checkResult == true
			temp0 = Object.Hotaru2X
			temp0 += object.xpos
			temp1 = object.ypos
			temp1 += Object.HotaruRadius
			object.direction = FACING_LEFT
			DrawSpriteFX(object.frame, FX_FLIP, temp0, temp1)
		end if
		break

	case HOTARU_TRACKPLAYER
		// Always face the Player
		if object[currentPlayer].xpos < object.xpos
			object.direction = FACING_RIGHT
		else
			object.direction = FACING_LEFT
		end if

		GetBit(checkResult, Object.ActiveHotarus, 0)
		if checkResult == true
			temp0 = Object.Hotaru1X
			temp0 += object.xpos
			temp1 = object.ypos
			temp1 -= Object.HotaruRadius
			DrawSpriteFX(object.frame, FX_FLIP, temp0, temp1)
		end if

		GetBit(checkResult, Object.ActiveHotarus, 1)
		if checkResult == true
			temp0 = Object.Hotaru2X
			temp0 += object.xpos
			temp1 = object.ypos
			temp1 += Object.HotaruRadius
			DrawSpriteFX(object.frame, FX_FLIP, temp0, temp1)
		end if
		break

	case HOTARU_PAUSE
		object.xpos = screen.xoffset
		object.xpos += screen.xcenter
		object.xpos <<= 16
		object.ypos = screen.yoffset
		object.ypos += 104
		object.ypos <<= 16

		GetBit(checkResult, Object.ActiveHotarus, 0)
		if checkResult == true
			temp0 = Object.Hotaru1X
			temp0 += object.xpos
			temp1 = object.ypos
			temp1 -= Object.HotaruRadius
			DrawSpriteFX(object.frame, FX_FLIP, temp0, temp1)
		end if

		GetBit(checkResult, Object.ActiveHotarus, 1)
		if checkResult == true
			temp0 = Object.Hotaru2X
			temp0 += object.xpos
			temp1 = object.ypos
			temp1 += Object.HotaruRadius
			DrawSpriteFX(object.frame, FX_FLIP, temp0, temp1)
		end if
		break

	case HOTARU_LIGHTSON1
	case HOTARU_LIGHTSON2
	case HOTARU_LIGHTSON3
	case HOTARU_FLYAWAY
		GetBit(checkResult, Object.ActiveHotarus, 0)
		if checkResult == true
			temp0 = Object.Hotaru1X
			temp0 += object.xpos
			temp1 = object.ypos
			temp1 -= Object.HotaruRadius
			DrawSpriteFX(6, FX_FLIP, temp0, temp1)
			DrawSpriteFX(object.frame, FX_FLIP, temp0, temp1)
		end if

		GetBit(checkResult, Object.ActiveHotarus, 1)
		if checkResult == true
			temp0 = Object.Hotaru2X
			temp0 += object.xpos
			temp1 = object.ypos
			temp1 += Object.HotaruRadius
			DrawSpriteFX(6, FX_FLIP, temp0, temp1)
			DrawSpriteFX(object.frame, FX_FLIP, temp0, temp1)
		end if
		break

	case HOTARU_LIGHTSOFF1
	case HOTARU_LIGHTSOFF2
	case HOTARU_LIGHTSOFF3
		GetBit(checkResult, Object.ActiveHotarus, 0)
		if checkResult == true
			temp0 = Object.Hotaru1X
			temp0 += object.xpos
			temp1 = object.ypos
			temp1 -= Object.HotaruRadius
			DrawSpriteFX(object.frame, FX_FLIP, temp0, temp1)
		end if

		GetBit(checkResult, Object.ActiveHotarus, 1)
		if checkResult == true
			temp0 = Object.Hotaru2X
			temp0 += object.xpos
			temp1 = object.ypos
			temp1 += Object.HotaruRadius
			DrawSpriteFX(object.frame, FX_FLIP, temp0, temp1)
		end if
		break

	case HOTARU_FLASHING
		GetBit(checkResult, Object.ActiveHotarus, 0)
		if checkResult == true
			temp0 = Object.Hotaru1X
			temp0 += object.xpos
			temp1 = object.ypos
			temp1 -= Object.HotaruRadius
			DrawSpriteFX(6, FX_FLIP, temp0, temp1)
			DrawSpriteFX(object.frame, FX_FLIP, temp0, temp1)
		end if

		GetBit(checkResult, Object.ActiveHotarus, 1)
		if checkResult == true
			temp0 = Object.Hotaru2X
			temp0 += object.xpos
			temp1 = object.ypos
			temp1 += Object.HotaruRadius
			DrawSpriteFX(6, FX_FLIP, temp0, temp1)
			DrawSpriteFX(object.frame, FX_FLIP, temp0, temp1)
		end if

		if Object.EletricityActive == true
			if Object.ActiveHotarus == 3 // Both bits in the number active, meaning that both Hotarus are alive and well

				// Draw the Middle Spark
				temp0 = object.animationTimer
				temp0 >>= 1
				temp0 += 7
				DrawSprite(temp0)

				// Draw the Left Spark

				temp1 = object.xpos
				temp1 >>= 1

				temp3 = object.xpos
				temp3 += Object.Hotaru1X
				temp3 >>= 1

				temp1 += temp3

				temp2 = object.ypos
				temp2 >>= 1

				temp3 = object.ypos
				temp3 -= Object.HotaruRadius
				temp3 >>= 1

				temp2 += temp3

				DrawSpriteXY(temp0, temp1, temp2)

				// Draw the Right Spark

				temp1 = object.xpos
				temp1 >>= 1

				temp3 = object.xpos
				temp3 += Object.Hotaru2X
				temp3 >>= 1

				temp1 += temp3

				temp2 = object.ypos
				temp2 >>= 1

				temp3 = object.ypos
				temp3 += Object.HotaruRadius
				temp3 >>= 1

				temp2 += temp3

				DrawSpriteXY(temp0, temp1, temp2)

				// Animate the Sparks
				object.animationTimer++
				object.animationTimer %= 6

			end if
		end if
		break

	end switch

end event


event ObjectStartup

	LoadSpriteSheet("R7/Objects.gif")

	// Hotaru Frames

	// "Good" type frames (normal lightbulb)
	SpriteFrame(-20, -12, 40, 24, 182, 121)
	SpriteFrame(-12, -20, 24, 40, 231, 119)
	SpriteFrame(-12, -20, 24, 40, 231, 160)

	// "Bad" type frames (broken lightbulb)
	SpriteFrame(-20, -12, 40, 24, 182, 146)
	SpriteFrame(-12, -20, 24, 40, 231, 201)
	SpriteFrame(-12, -20, 24, 40, 206, 215)

	// blulb
	SpriteFrame(-11, -7, 24, 24, 175, 196)

	// Eletricity Frames
	SpriteFrame(-12, -12, 24, 24, 150, 171)
	SpriteFrame(-12, -12, 24, 24, 175, 171)
	SpriteFrame(-12, -12, 24, 24, 150, 196)

	// Cycle through all Hotaru objects in the level
	foreach (TypeName[Hotaru], arrayPos0, ALL_ENTITIES)
			// First, set their starting positions
			Object.StartPosX[arrayPos0] = object[arrayPos0].xpos
			Object.StartPosY[arrayPos0] = object[arrayPos0].ypos

			// Hotarus draw above other objects, including the Player
			object[arrayPos0].drawOrder = 5

			// Setup the Hotarus' type and initial positions
			switch Object.Quality[arrayPos0]
			case 0
				// Properties of:
				// Radius of 60 pixels
				// Good variant, with a functioning Light
				// Start the Hotarus 70 pixels apart (35 pixels from the base Pos)
				Object.HotaruRadius[arrayPos0] = 0x3C0000
				Object.Quality[arrayPos0] = GOOD_QUALITY
				Object.Hotaru1X[arrayPos0] = -0x230000
				Object.Hotaru2X[arrayPos0] = 0x230000
				break

			case 1
				// Properties of:
				// Radius of 60 pixels
				// Bad variant, with a broken Light
				// Start the Hotarus 70 pixels apart (35 pixels from the base Pos)
				Object.HotaruRadius[arrayPos0] = 0x3C0000
				Object.Quality[arrayPos0] = BAD_QUALITY
				Object.Hotaru1X[arrayPos0] = -0x230000
				Object.Hotaru2X[arrayPos0] = 0x230000
				break

			case 4
				// Properties of:
				// Radius of 68 pixels
				// Good variant, with a functioning Light
				// Start the Hotarus 100 pixels apart (50 pixels from the base Pos)
				Object.HotaruRadius[arrayPos0] = 0x440000
				Object.Quality[arrayPos0] = GOOD_QUALITY
				Object.Hotaru1X[arrayPos0] = -0x320000
				Object.Hotaru2X[arrayPos0] = 0x320000
				break

			case 5
				// Properties of:
				// Radius of 68 pixels
				// Bad variant, with a broken Light
				// Start the Hotarus 100 pixels apart (50 pixels from the base Pos)
				Object.HotaruRadius[arrayPos0] = 0x440000
				Object.Quality[arrayPos0] = BAD_QUALITY
				Object.Hotaru1X[arrayPos0] = -0x320000
				Object.Hotaru2X[arrayPos0] = 0x320000
				break

			case 8
				// Properties of:
				// Radius of 56 pixels
				// Good variant, with a functioning Light
				// Start the Hotarus 140 pixels apart (70 pixels from the base Pos)
				Object.HotaruRadius[arrayPos0] = 0x380000
				Object.Quality[arrayPos0] = GOOD_QUALITY
				Object.Hotaru1X[arrayPos0] = -0x460000
				Object.Hotaru2X[arrayPos0] = 0x460000
				break

			case 9
				// Properties of:
				// Radius of 56 pixels
				// Bad variant, with a broken Light
				// Start the Hotarus 140 pixels apart (70 pixels from the base Pos)
				Object.HotaruRadius[arrayPos0] = 0x380000
				Object.Quality[arrayPos0] = BAD_QUALITY
				Object.Hotaru1X[arrayPos0] = -0x460000
				Object.Hotaru2X[arrayPos0] = 0x460000
				break

			case 12
				// Properties of:
				// Radius of 18 pixels
				// Good variant, with a functioning Light
				// Start the Hotarus 192 pixels apart (96 pixels from the base Pos)
				Object.HotaruRadius[arrayPos0] = 0x120000
				Object.Quality[arrayPos0] = GOOD_QUALITY
				Object.Hotaru1X[arrayPos0] = -0x600000
				Object.Hotaru2X[arrayPos0] = 0x600000
				break

			case 13
				// Properties of:
				// Radius of 18 pixels
				// Bad variant, with a broken Light
				// Start the Hotarus 192 pixels apart (96 pixels from the base Pos)
				Object.HotaruRadius[arrayPos0] = 0x120000
				Object.Quality[arrayPos0] = BAD_QUALITY
				Object.Hotaru1X[arrayPos0] = -0x600000
				Object.Hotaru2X[arrayPos0] = 0x600000
				break

			end switch

			// Set both of the Object's Hotarus to active
			SetBit(Object.ActiveHotarus[arrayPos0], 0, true)
			SetBit(Object.ActiveHotarus[arrayPos0], 1, true)
	next

end event


// ========================
// Editor Subs
// ========================




// Property Value


// Condition



// Formation






// Property Value


// Condition



// Formation









event RSDKDraw
	GetBit(temp5, Object.Quality, 0)

	temp0 = Object.Quality
	temp0 &= 254
	switch temp0
	case 0
	default
		temp2 = 0x3C0000
		temp3 = -0x230000
		break
	case 4
		temp2 = 0x440000
		temp3 = -0x320000
		break
	case 8
		temp2 = 0x380000
		temp3 = -0x460000
		break
	case 12
		temp2 = 0x120000
		temp3 = -0x600000
		break
	end switch

	temp4 = temp3
	FlipSign(temp4)

	temp0 = temp3
	temp0 += object.xpos
	temp1 = object.ypos
	temp1 -= temp2
	object.direction = FACING_LEFT
	DrawSpriteFX(temp5, FX_FLIP, temp0, temp1)

	temp0 = temp4
	temp0 += object.xpos
	temp1 = object.ypos
	temp1 += temp2
	object.direction = FACING_RIGHT
	DrawSpriteFX(temp5, FX_FLIP, temp0, temp1)
end event


event RSDKLoad
	LoadSpriteSheet("R7/Objects.gif")
	SpriteFrame(-20, -12, 40, 24, 182, 121)
	SpriteFrame(-20, -12, 40, 24, 182, 146)












end event
